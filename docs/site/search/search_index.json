{
    "docs": [
        {
            "location": "/", 
            "text": "Home cage surveillance is a system to record video of your animals in their home cage.\n\n\nIt is designed to run on a Raspberry Pi computer using a Raspberry Pi NoIR camera.\n\n\nFeatures\n\n\n\n\nRecord video 24/7\n\n\nAutomaticall controls day-time and night-time lights.\n\n\nLive video streaming to a web browser\n\n\n\n\nInstall\n\n\nSee the \ninstalling the software\n page.\n\n\nInterface options\n\n\n\n\ncommand line\n - A command line interface.\n\n\nweb\n - A point and click web browser interface.\n\n\nREST\n - A rest interface to communicate with a homecage server", 
            "title": "Getting started"
        }, 
        {
            "location": "/#features", 
            "text": "Record video 24/7  Automaticall controls day-time and night-time lights.  Live video streaming to a web browser", 
            "title": "Features"
        }, 
        {
            "location": "/#install", 
            "text": "See the  installing the software  page.", 
            "title": "Install"
        }, 
        {
            "location": "/#interface-options", 
            "text": "command line  - A command line interface.  web  - A point and click web browser interface.  REST  - A rest interface to communicate with a homecage server", 
            "title": "Interface options"
        }, 
        {
            "location": "/images/", 
            "text": "These are images of the homecage at various developmental stages\n\n\nv0.0\n\n\nOverview\n\n\n\n\n\n\nLights and camera\n\n\n\n\n\n\nRats nest", 
            "title": "Images"
        }, 
        {
            "location": "/images/#v00", 
            "text": "", 
            "title": "v0.0"
        }, 
        {
            "location": "/images/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/images/#lights-and-camera", 
            "text": "", 
            "title": "Lights and camera"
        }, 
        {
            "location": "/images/#rats-nest", 
            "text": "", 
            "title": "Rats nest"
        }, 
        {
            "location": "/installing-the-software/", 
            "text": "Homecage requires the following libraries:\n\n\n\n\nWiring Pi\n - Library that provides a command line interface to the GPIO pins. This should be installed by default.\n\n\nGPIO\n - Python library to control GPIO pins.\n\n\nflask\n - A python web server.\n\n\nuv4l\n - Library for live video streaming to a web browser\n\n\nAdafruit_DHT\n - (optional) Python library to read from a DHT temperature and humidity sensor.\n\n\n\n\n1) Get a functioning Raspberry Pi\n\n\nThese instructions assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our \nsetup intructions\n.\n\n\n2) Clone the repository\n\n\nThis will make a folder \nhomecage\n in your root directory. You can always return to your root directory with \ncd\n\n\n# if you don't already have git installed\nsudo apt-get install git\n\ngit clone https://github.com/cudmore/homecage.git\n\n\n\n3) Install python libraries\n\n\n# if you don't already have pip installed\nsudo apt-get install python-pip\n\npip install rpi.gpio\npip install flask\n\n# if you run into errors then try installing\nsudo apt-get install build-essential python-dev python-openssl\n\n\n\n4) Install DHT temperature sensor (optional)\n\n\nIf you run into trouble then go to \nthis tutorial\n.\n\n\ncd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install\n\n\n\n5) Install uv4l for live video streaming (optional)\n\n\nIf you run into trouble, then follow \nthis tutorial\n.\n\n\ncurl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# add the following line to /etc/apt/sources.list\n# start editor with `sudo pico /etc/apt/sources.list`\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\nsudo apt-get update\nsudo apt-get install uv4l uv4l-raspicam uv4l-server\n\n\n\n\n6) Create the folder to save video files\n\n\ncd\nmkdir video\n\n\n\nVideo files will be saved to \n/home/pi/video\n. This can be changed in the web server configuration file \nhomecage/homecage_app/config.json\n. If your going to save a lot of video, please \nmount a usb key\n and save videos there.\n\n\n7) Start the web server at boot (optional)\n\n\nEdit crontab\n\n\ncrontab -e\n\n\n\nAdd the following line to the end of the file (make sure it is one line)\n\n\n@reboot (sleep 10; cd /home/pi/homecage/homecage_app \n /usr/bin/python /home/pi/homecage/homecage_app/homecage_app.py)\n\n\n\n\nDone installing !!!\n\n\nAt this point you can interact with the homecage either through the \nweb\n or from the \ncommand line\n.", 
            "title": "Install"
        }, 
        {
            "location": "/installing-the-software/#1-get-a-functioning-raspberry-pi", 
            "text": "These instructions assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our  setup intructions .", 
            "title": "1) Get a functioning Raspberry Pi"
        }, 
        {
            "location": "/installing-the-software/#2-clone-the-repository", 
            "text": "This will make a folder  homecage  in your root directory. You can always return to your root directory with  cd  # if you don't already have git installed\nsudo apt-get install git\n\ngit clone https://github.com/cudmore/homecage.git", 
            "title": "2) Clone the repository"
        }, 
        {
            "location": "/installing-the-software/#3-install-python-libraries", 
            "text": "# if you don't already have pip installed\nsudo apt-get install python-pip\n\npip install rpi.gpio\npip install flask\n\n# if you run into errors then try installing\nsudo apt-get install build-essential python-dev python-openssl", 
            "title": "3) Install python libraries"
        }, 
        {
            "location": "/installing-the-software/#4-install-dht-temperature-sensor-optional", 
            "text": "If you run into trouble then go to  this tutorial .  cd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install", 
            "title": "4) Install DHT temperature sensor (optional)"
        }, 
        {
            "location": "/installing-the-software/#5-install-uv4l-for-live-video-streaming-optional", 
            "text": "If you run into trouble, then follow  this tutorial .  curl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# add the following line to /etc/apt/sources.list\n# start editor with `sudo pico /etc/apt/sources.list`\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\nsudo apt-get update\nsudo apt-get install uv4l uv4l-raspicam uv4l-server", 
            "title": "5) Install uv4l for live video streaming (optional)"
        }, 
        {
            "location": "/installing-the-software/#6-create-the-folder-to-save-video-files", 
            "text": "cd\nmkdir video  Video files will be saved to  /home/pi/video . This can be changed in the web server configuration file  homecage/homecage_app/config.json . If your going to save a lot of video, please  mount a usb key  and save videos there.", 
            "title": "6) Create the folder to save video files"
        }, 
        {
            "location": "/installing-the-software/#7-start-the-web-server-at-boot-optional", 
            "text": "Edit crontab  crontab -e  Add the following line to the end of the file (make sure it is one line)  @reboot (sleep 10; cd /home/pi/homecage/homecage_app   /usr/bin/python /home/pi/homecage/homecage_app/homecage_app.py)", 
            "title": "7) Start the web server at boot (optional)"
        }, 
        {
            "location": "/installing-the-software/#done-installing", 
            "text": "At this point you can interact with the homecage either through the  web  or from the  command line .", 
            "title": "Done installing !!!"
        }, 
        {
            "location": "/web-interface/", 
            "text": "Running the web server\n\n\nAt a command prompt, type:\n\n\ncd\ncd homecage/homecage_app\npython homecage_app.py\n\n\n\n\nOnce \nhomecage_app.py\n is running you can access the web server in a browser with the address:\n\n\nhttp:[your_ip]:5000\n\n\n\nWhere [your_ip] is the IP address of your Pi.\n\n\nTo stop the homecage web server, use keyboard \nctrl+c\n\n\nConfiguring the web server\n\n\nThe server can be configured by editing the \nhomecage/homecage_app/config.json\n file.\n\n\ncd\npico homecage/homecage_app/config.json\n\n\n\nThe default file is:\n\n\n{\n    \nhardware\n:{\n        \nirLightPin\n: 7,\n        \nwhiteLightPin\n: 8,\n        \ntemperatureSensor\n: 9\n    },\n    \nlights\n:{\n        \nsunrise\n: 6,\n        \nsunset\n: 18\n    },\n    \nvideo\n:{\n        \nfps\n: 30,\n        \nresolution\n: [1024,768],\n        \nfileDuration\n: 6,\n        \ncaptureStill\n: true,\n        \nstillInterval\n: 2\n    },\n    \nstream\n: {\n        \nstreamResolution\n: [1024,768]\n    }\n}", 
            "title": "Web interface"
        }, 
        {
            "location": "/web-interface/#running-the-web-server", 
            "text": "At a command prompt, type:  cd\ncd homecage/homecage_app\npython homecage_app.py  Once  homecage_app.py  is running you can access the web server in a browser with the address:  http:[your_ip]:5000  Where [your_ip] is the IP address of your Pi.  To stop the homecage web server, use keyboard  ctrl+c", 
            "title": "Running the web server"
        }, 
        {
            "location": "/web-interface/#configuring-the-web-server", 
            "text": "The server can be configured by editing the  homecage/homecage_app/config.json  file.  cd\npico homecage/homecage_app/config.json  The default file is:  {\n     hardware :{\n         irLightPin : 7,\n         whiteLightPin : 8,\n         temperatureSensor : 9\n    },\n     lights :{\n         sunrise : 6,\n         sunset : 18\n    },\n     video :{\n         fps : 30,\n         resolution : [1024,768],\n         fileDuration : 6,\n         captureStill : true,\n         stillInterval : 2\n    },\n     stream : {\n         streamResolution : [1024,768]\n    }\n}", 
            "title": "Configuring the web server"
        }, 
        {
            "location": "/rest-interface/", 
            "text": "The homecage server will respond to the following REST calls.\n\n\nServer Status:\n\n\nGet runtime status of server\n\n\n/status\n\n\n\nGet user configured options\n\n\n/params\n\n\n\nRecord\n\n\nStart and stop video recording\n\n\n/record/1 \n/record/0\n\n\n\nStream\n\n\nStart and stop video streaming\n\n\n/stream/1 \n/stream/0\n\n\n\nLights\n\n\nTurn lights on and off\n\n\n/irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0\n\n\n\nImages\n\n\n/lastimage\n\n\n\nSet user options\n\n\n/set/fps/\nint:value\n \n/set/fileDuration/\nint:value", 
            "title": "REST interface"
        }, 
        {
            "location": "/rest-interface/#server-status", 
            "text": "Get runtime status of server  /status  Get user configured options  /params", 
            "title": "Server Status:"
        }, 
        {
            "location": "/rest-interface/#record", 
            "text": "Start and stop video recording  /record/1 \n/record/0", 
            "title": "Record"
        }, 
        {
            "location": "/rest-interface/#stream", 
            "text": "Start and stop video streaming  /stream/1 \n/stream/0", 
            "title": "Stream"
        }, 
        {
            "location": "/rest-interface/#lights", 
            "text": "Turn lights on and off  /irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0", 
            "title": "Lights"
        }, 
        {
            "location": "/rest-interface/#images", 
            "text": "/lastimage", 
            "title": "Images"
        }, 
        {
            "location": "/rest-interface/#set-user-options", 
            "text": "/set/fps/ int:value  \n/set/fileDuration/ int:value", 
            "title": "Set user options"
        }, 
        {
            "location": "/command-line/", 
            "text": "1) Log in to the Pi\n\n\nOn a Mac, use the terminal application in /Applications/Utilities/terminal.app\n\n\n# Type\nssh pi@10.16.80.162\n\n# Enter password\n[your_password]\n\n\n\n2) Change into the homecage directory\n\n\nAt the command prompt, type\n\n\ncd\ncd homecage\n\n\n\n3) Get command help\n\n\nThe commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.\n\n\nTo get help, at the command prompt, type \n\n\n./help\n\n\n\nThis returns\n\n\n Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage\n\n\n\n4) Position the cages within a good field-of-view\n\n\nStart a video stream and then view the stream in a web browser.\n\n\nstream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream\n\n\n\nIn any browser, go to the address \nhttp://10.16.80.162:8080/stream\n\n\nWhile positioning cages, turn the white and or IR LEDs on and off\n\n\n# Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off\n\n\n\nWhen your happy with position, stop the video stream\n\n\nstream stop\n\n\n\n5) Start continuous video recording\n\n\nrecord start\n\n\n\nThis will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.\n\n\n6) Mount the file server to get your video files\n\n\nOn a Mac, use \nFinder -\n Go -\n Connect To Server...\n and log in as follows\n\n\nafp://10.16.80.162\nusername: pi\npassword: [your_password]\n\n\n\nFiles are saved in the \n/video/\n folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.\n\n\n7) Log out of the Pi\n\n\nexit", 
            "title": "Command line interface"
        }, 
        {
            "location": "/command-line/#1-log-in-to-the-pi", 
            "text": "On a Mac, use the terminal application in /Applications/Utilities/terminal.app  # Type\nssh pi@10.16.80.162\n\n# Enter password\n[your_password]", 
            "title": "1) Log in to the Pi"
        }, 
        {
            "location": "/command-line/#2-change-into-the-homecage-directory", 
            "text": "At the command prompt, type  cd\ncd homecage", 
            "title": "2) Change into the homecage directory"
        }, 
        {
            "location": "/command-line/#3-get-command-help", 
            "text": "The commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.  To get help, at the command prompt, type   ./help  This returns   Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage", 
            "title": "3) Get command help"
        }, 
        {
            "location": "/command-line/#4-position-the-cages-within-a-good-field-of-view", 
            "text": "Start a video stream and then view the stream in a web browser.  stream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream  In any browser, go to the address  http://10.16.80.162:8080/stream  While positioning cages, turn the white and or IR LEDs on and off  # Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off  When your happy with position, stop the video stream  stream stop", 
            "title": "4) Position the cages within a good field-of-view"
        }, 
        {
            "location": "/command-line/#5-start-continuous-video-recording", 
            "text": "record start  This will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.", 
            "title": "5) Start continuous video recording"
        }, 
        {
            "location": "/command-line/#6-mount-the-file-server-to-get-your-video-files", 
            "text": "On a Mac, use  Finder -  Go -  Connect To Server...  and log in as follows  afp://10.16.80.162\nusername: pi\npassword: [your_password]  Files are saved in the  /video/  folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.", 
            "title": "6) Mount the file server to get your video files"
        }, 
        {
            "location": "/command-line/#7-log-out-of-the-pi", 
            "text": "exit", 
            "title": "7) Log out of the Pi"
        }, 
        {
            "location": "/mounting-the-file-server/", 
            "text": "MacOS\n\n\nThis assumes that apple-file-protocol (AFP) is installed and running on the Pi\n\n\nafp://[IP]\n\n\n\nWindows\n\n\nThis assumes Samba (SMB) is running and installed on the Pi\n\n\nsmb:\\\\[IP]", 
            "title": "Mounting the file server"
        }, 
        {
            "location": "/mounting-the-file-server/#macos", 
            "text": "This assumes that apple-file-protocol (AFP) is installed and running on the Pi  afp://[IP]", 
            "title": "MacOS"
        }, 
        {
            "location": "/mounting-the-file-server/#windows", 
            "text": "This assumes Samba (SMB) is running and installed on the Pi  smb:\\\\[IP]", 
            "title": "Windows"
        }, 
        {
            "location": "/wiring-the-system/", 
            "text": "Camera\n\n\nAttach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end.\n\n\nThe blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens).\n\n\nLights\n\n\nYou want to use an external 12V AC/DC power supply. Never connect this directly to the Pi, instead use a relay switch.\n\n\n\n\nWire 2x GPIO pins to a two-channel relay\n\n\nConnect the lights to the two-channel relay\n\n\n\n\nOptional\n\n\n\n\nWire the DHT temperature sensor (optional)\n\n\nWire a IR light sensor\n\n\nWire a visible light sensor", 
            "title": "Wiring the system"
        }, 
        {
            "location": "/wiring-the-system/#camera", 
            "text": "Attach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end.  The blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens).", 
            "title": "Camera"
        }, 
        {
            "location": "/wiring-the-system/#lights", 
            "text": "You want to use an external 12V AC/DC power supply. Never connect this directly to the Pi, instead use a relay switch.   Wire 2x GPIO pins to a two-channel relay  Connect the lights to the two-channel relay", 
            "title": "Lights"
        }, 
        {
            "location": "/wiring-the-system/#optional", 
            "text": "Wire the DHT temperature sensor (optional)  Wire a IR light sensor  Wire a visible light sensor", 
            "title": "Optional"
        }, 
        {
            "location": "/parts-list/", 
            "text": "Build a box to hold cages, lights, and camera\n\n\nStrap the computer to the side, place on top or put inside the box. If placing inside the box, make sure to make an inner box to block LEDs on computer.\n\n\n\n\nComputer\n\n\n\n\nRaspberry Pi 3\n\n\n5V AC/DC power, 2A\n\n\nSD card, class 10, 16 GB (for system installation)\n\n\nUSB key, 64 GB (to save video)\n\n\nethernet cable\n\n\ncase\n\n\n\n\nCamera\n\n\n\n\nRaspberry Pi NoIR\n\n\nCSI Camera cable\n\n\n\n\nLights\n\n\n\n\n12V AC/DC adapter\n\n\n2-channel relay (to switch lights on/off)\n\n\nIR lights (\n 900 nm)\n\n\nWhite lights\n\n\n\n\nEnvironmental\n\n\n\n\ntemperature and humidity sensor\n\n\nIR light sensor\n\n\nWhite light sensor", 
            "title": "Parts list"
        }, 
        {
            "location": "/parts-list/#computer", 
            "text": "Raspberry Pi 3  5V AC/DC power, 2A  SD card, class 10, 16 GB (for system installation)  USB key, 64 GB (to save video)  ethernet cable  case", 
            "title": "Computer"
        }, 
        {
            "location": "/parts-list/#camera", 
            "text": "Raspberry Pi NoIR  CSI Camera cable", 
            "title": "Camera"
        }, 
        {
            "location": "/parts-list/#lights", 
            "text": "12V AC/DC adapter  2-channel relay (to switch lights on/off)  IR lights (  900 nm)  White lights", 
            "title": "Lights"
        }, 
        {
            "location": "/parts-list/#environmental", 
            "text": "temperature and humidity sensor  IR light sensor  White light sensor", 
            "title": "Environmental"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Converting h264 files to mp4\n\n\nThe Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.\n\n\nSee \nthis blog post\n\n\nTroubleshoot video recording\n\n\nCapture a single image\n\n\nraspistill -o test.jpg\n\n\n\n\nTroubleshoot video streaming\n\n\nRun uv4l by hand\n\n\nuv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\n\n\n\n\nBrowse the live stream at\n\n\nhttp://[IP]:8080\n\n\n\n\nStop uv4l (make sure all browser windows are closed)\n\n\nsudo pkill uv4l", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/#converting-h264-files-to-mp4", 
            "text": "The Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.  See  this blog post", 
            "title": "Converting h264 files to mp4"
        }, 
        {
            "location": "/troubleshooting/#troubleshoot-video-recording", 
            "text": "Capture a single image  raspistill -o test.jpg", 
            "title": "Troubleshoot video recording"
        }, 
        {
            "location": "/troubleshooting/#troubleshoot-video-streaming", 
            "text": "Run uv4l by hand  uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on  Browse the live stream at  http://[IP]:8080  Stop uv4l (make sure all browser windows are closed)  sudo pkill uv4l", 
            "title": "Troubleshoot video streaming"
        }, 
        {
            "location": "/dev-notes/", 
            "text": "mkDocs\n\n\nWe use \nmkdocs\n to generate the documentation website from markdown files.\n\n\nInstall\n\n\npip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material\n\n\n\nServe locally\n\n\ncd\ncd homecage/docs\nmkdocs serve\n\n\n\nPush to github\n\n\ncd\ncd homecage/docs\nmkdocs gh-deploy --clean\n\n\n\nuv4l\n\n\nuv4l is what we use to stream live video.\n\n\n20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned \ndefunct\n process that can't actually be kill(ed). This was mucking up any future interaciton as \nstream\n, \nrecord\n, and \nstatus\n thought there was still a uv4l process.\n\n\nSent this to uv4l people\n\n\nHi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a \ndefunct\n\nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?\n\n\n\n\nAnswer was to kill child processes first. Get child processes of PID with `pstree -p PID'\n\n\nWhich eventually led to this\n\n\n# get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a `\ndefunct\n` uv4l !\nsudo kill -- -PID\n\n\n\n\nRemove uv4l-raspicam-extras\n\n\nsudo apt-get remove uv4l-raspicam-extras\n\n\n\nToDo\n\n\n20171111\n\n\n\n\nfinish index.html interface, mostly adding interface to change self.config\n\n\nsplit self.config (from config.json) and self.status (runtime variables)\n\n\nadd in dht sensor code\n\n\nadd in white and ir sensor code", 
            "title": "Development notes"
        }, 
        {
            "location": "/dev-notes/#mkdocs", 
            "text": "We use  mkdocs  to generate the documentation website from markdown files.  Install  pip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material  Serve locally  cd\ncd homecage/docs\nmkdocs serve  Push to github  cd\ncd homecage/docs\nmkdocs gh-deploy --clean", 
            "title": "mkDocs"
        }, 
        {
            "location": "/dev-notes/#uv4l", 
            "text": "uv4l is what we use to stream live video.  20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned  defunct  process that can't actually be kill(ed). This was mucking up any future interaciton as  stream ,  record , and  status  thought there was still a uv4l process.", 
            "title": "uv4l"
        }, 
        {
            "location": "/dev-notes/#sent-this-to-uv4l-people", 
            "text": "Hi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a  defunct \nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?  Answer was to kill child processes first. Get child processes of PID with `pstree -p PID'  Which eventually led to this  # get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a ` defunct ` uv4l !\nsudo kill -- -PID", 
            "title": "Sent this to uv4l people"
        }, 
        {
            "location": "/dev-notes/#remove-uv4l-raspicam-extras", 
            "text": "sudo apt-get remove uv4l-raspicam-extras", 
            "title": "Remove uv4l-raspicam-extras"
        }, 
        {
            "location": "/dev-notes/#todo", 
            "text": "", 
            "title": "ToDo"
        }, 
        {
            "location": "/dev-notes/#20171111", 
            "text": "finish index.html interface, mostly adding interface to change self.config  split self.config (from config.json) and self.status (runtime variables)  add in dht sensor code  add in white and ir sensor code", 
            "title": "20171111"
        }
    ]
}