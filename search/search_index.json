{
    "docs": [
        {
            "location": "/", 
            "text": "Home cage surveillance is a system to record video of your animals in their home cage.\n\n\nIt is designed to run on a Raspberry Pi computer using a Raspberry Pi NoIR camera.\n\n\nFeatures\n\n\n\n\nRecord video 24/7.\n\n\nAutomatically controls day-time and night-time lights.\n\n\nEasy to use web interface to control all aspects of the experiment.\n\n\nLive video streaming to a web browser.\n\n\n\n\nInterface options\n\n\n\n\nWeb\n - A point and click web browser interface.\n\n\nREST\n - A rest interface to communicate with a homecage server\n\n\nCommand line\n - A command line interface.\n\n\n\n\n\n  \n\nYour browser does not support the video tag.\n\n\n\n\nHome-cage video recording during the dark cycle using IR lights of two mouse cages with one mouse in each with running wheel.", 
            "title": "Getting started"
        }, 
        {
            "location": "/#features", 
            "text": "Record video 24/7.  Automatically controls day-time and night-time lights.  Easy to use web interface to control all aspects of the experiment.  Live video streaming to a web browser.", 
            "title": "Features"
        }, 
        {
            "location": "/#interface-options", 
            "text": "Web  - A point and click web browser interface.  REST  - A rest interface to communicate with a homecage server  Command line  - A command line interface.   \n   \nYour browser does not support the video tag.  Home-cage video recording during the dark cycle using IR lights of two mouse cages with one mouse in each with running wheel.", 
            "title": "Interface options"
        }, 
        {
            "location": "/installing-the-software/", 
            "text": "Overview: Required libraries\n\n\n\n\nWiring Pi\n - Library that provides a command line interface to the GPIO pins. This should be installed by default.\n\n\nGPIO\n - Python library to control GPIO pins.\n\n\npicamera\n - Python library to control the camera.\n\n\nflask\n - A python web server.\n\n\nAdafruit_DHT\n - (optional) Python library to read from a DHT temperature and humidity sensor.\n\n\nuv4l\n - Command line tool for live video streaming to a web browser.\n\n\navconv\n - Command line tool to convert video files.\n\n\n\n\n1) Get a functioning Raspberry Pi\n\n\nThese instructions assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our \nsetup intructions\n.\n\n\n2) Clone the repository\n\n\nThis will make a folder \nhomecage\n in your root directory. You can always return to your root directory with \ncd\n\n\n# if you don't already have git installed\nsudo apt-get install git\n\ngit clone https://github.com/cudmore/homecage.git\n\n\n\n3) Install python libraries\n\n\n# if you don't already have pip installed\nsudo apt-get install python-pip\n\npip install rpi.gpio\npip install flask\nsudo pip install flask-cors # not sure why sudo is needed?\n\n# if you run into errors then try installing\nsudo apt-get install build-essential python-dev python-openssl\n\n\n\n4) Install uv4l for live video streaming (optional)\n\n\nIf you run into trouble, then follow \nthis tutorial\n.\n\n\ncurl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# add the following line to /etc/apt/sources.list\n# start editor with `sudo pico /etc/apt/sources.list`\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\nsudo apt-get update\nsudo apt-get install uv4l uv4l-raspicam uv4l-server\n\n\n\n\n5) Install avconv to convert videos from .h264 to .mp4\n\n\nIf you run into trouble, then see \nthis blog post\n.\n\n\nsudo apt-get update\nsudo apt-get install libav-tools\n\n\n\nVideo files will be saved to \n/home/pi/video\n. This can be changed in the web server configuration file \nhomecage/homecage_app/config.json\n. If your going to save a lot of video, please \nmount a usb key\n and save videos there.\n\n\n6) Install DHT temperature sensor (optional)\n\n\nIf you run into trouble then go to \nthis tutorial\n.\n\n\ncd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install\n\n\n\n7) Start the web server at boot (optional)\n\n\nEdit crontab\n\n\ncrontab -e\n\n\n\nAdd the following line to the end of the file (make sure it is one line)\n\n\n@reboot (sleep 10; cd /home/pi/homecage/homecage_app \n /usr/bin/python /home/pi/homecage/homecage_app/homecage_app.py)\n\n\n\n\nDone installing !!!\n\n\nAt this point you can interact with the homecage either through the \nweb\n or from the \ncommand line\n.", 
            "title": "Install"
        }, 
        {
            "location": "/installing-the-software/#overview-required-libraries", 
            "text": "Wiring Pi  - Library that provides a command line interface to the GPIO pins. This should be installed by default.  GPIO  - Python library to control GPIO pins.  picamera  - Python library to control the camera.  flask  - A python web server.  Adafruit_DHT  - (optional) Python library to read from a DHT temperature and humidity sensor.  uv4l  - Command line tool for live video streaming to a web browser.  avconv  - Command line tool to convert video files.", 
            "title": "Overview: Required libraries"
        }, 
        {
            "location": "/installing-the-software/#1-get-a-functioning-raspberry-pi", 
            "text": "These instructions assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our  setup intructions .", 
            "title": "1) Get a functioning Raspberry Pi"
        }, 
        {
            "location": "/installing-the-software/#2-clone-the-repository", 
            "text": "This will make a folder  homecage  in your root directory. You can always return to your root directory with  cd  # if you don't already have git installed\nsudo apt-get install git\n\ngit clone https://github.com/cudmore/homecage.git", 
            "title": "2) Clone the repository"
        }, 
        {
            "location": "/installing-the-software/#3-install-python-libraries", 
            "text": "# if you don't already have pip installed\nsudo apt-get install python-pip\n\npip install rpi.gpio\npip install flask\nsudo pip install flask-cors # not sure why sudo is needed?\n\n# if you run into errors then try installing\nsudo apt-get install build-essential python-dev python-openssl", 
            "title": "3) Install python libraries"
        }, 
        {
            "location": "/installing-the-software/#4-install-uv4l-for-live-video-streaming-optional", 
            "text": "If you run into trouble, then follow  this tutorial .  curl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# add the following line to /etc/apt/sources.list\n# start editor with `sudo pico /etc/apt/sources.list`\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\nsudo apt-get update\nsudo apt-get install uv4l uv4l-raspicam uv4l-server", 
            "title": "4) Install uv4l for live video streaming (optional)"
        }, 
        {
            "location": "/installing-the-software/#5-install-avconv-to-convert-videos-from-h264-to-mp4", 
            "text": "If you run into trouble, then see  this blog post .  sudo apt-get update\nsudo apt-get install libav-tools  Video files will be saved to  /home/pi/video . This can be changed in the web server configuration file  homecage/homecage_app/config.json . If your going to save a lot of video, please  mount a usb key  and save videos there.", 
            "title": "5) Install avconv to convert videos from .h264 to .mp4"
        }, 
        {
            "location": "/installing-the-software/#6-install-dht-temperature-sensor-optional", 
            "text": "If you run into trouble then go to  this tutorial .  cd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install", 
            "title": "6) Install DHT temperature sensor (optional)"
        }, 
        {
            "location": "/installing-the-software/#7-start-the-web-server-at-boot-optional", 
            "text": "Edit crontab  crontab -e  Add the following line to the end of the file (make sure it is one line)  @reboot (sleep 10; cd /home/pi/homecage/homecage_app   /usr/bin/python /home/pi/homecage/homecage_app/homecage_app.py)", 
            "title": "7) Start the web server at boot (optional)"
        }, 
        {
            "location": "/installing-the-software/#done-installing", 
            "text": "At this point you can interact with the homecage either through the  web  or from the  command line .", 
            "title": "Done installing !!!"
        }, 
        {
            "location": "/web-interface/", 
            "text": "Running the web server\n\n\nLogin to the Pi\n\n\nssh pi@[your_ip]\n\n\n\nWhere [your_ip] is the IP address of your Pi.\n\n\nAt a command prompt, type:\n\n\ncd\ncd homecage/homecage_app\npython homecage_app.py\n\n\n\n\nOnce \nhomecage_app.py\n is running you can access the web server in a browser with the address:\n\n\nhttp:[your_ip]:5000\n\n\n\nWhere [your_ip] is the IP address of your Pi.\n\n\nTo stop the homecage web server, in the command prompt use keyboard \nctrl+c\n\n\nViewing saved videos\n\n\nClick the hard-drive icon to view saved video files.\n\n\nSetting options\n\n\nIn the web interface\n\n\nExpand the \noptions\n tab to set parameters of homecage. Each option will apply to the current session. Use \nsave options\n to permanaently save the options. Load the default options again with 'Load Default Options'.\n\n\n\n\nOn the Pi\n\n\nThe homecage options can be configured by editing the \nhomecage/homecage_app/config.json\n file.\n\n\ncd\npico homecage/homecage_app/config.json\n\n\n\nThe default file is:\n\n\n{\n    \nhardware\n: {\n        \nirLightPin\n: 7, \n        \nwhiteLightPin\n: 8,\n        \ntemperatureSensor\n: 9, \n        \ntemperatureInterval\n: 20 \n    }, \n    \nlights\n: {\n        \ncontrolLights\n: true, \n        \nsunset\n: 18, \n        \nsunrise\n: 6\n    }, \n    \nvideo\n: {\n        \nfileDuration\n: 10, \n        \nconverttomp4\n: true, \n        \nfps\n: 30, \n        \nresolution\n: [\n            1024, \n            768\n        ],\n        \ncaptureStill\n: true, \n        \nstillInterval\n: 2 \n    }, \n    \nstream\n: {\n        \nstreamResolution\n: [\n            1024, \n            768\n        ]\n    }\n}", 
            "title": "Web interface"
        }, 
        {
            "location": "/web-interface/#running-the-web-server", 
            "text": "Login to the Pi  ssh pi@[your_ip]  Where [your_ip] is the IP address of your Pi.  At a command prompt, type:  cd\ncd homecage/homecage_app\npython homecage_app.py  Once  homecage_app.py  is running you can access the web server in a browser with the address:  http:[your_ip]:5000  Where [your_ip] is the IP address of your Pi.  To stop the homecage web server, in the command prompt use keyboard  ctrl+c", 
            "title": "Running the web server"
        }, 
        {
            "location": "/web-interface/#viewing-saved-videos", 
            "text": "Click the hard-drive icon to view saved video files.", 
            "title": "Viewing saved videos"
        }, 
        {
            "location": "/web-interface/#setting-options", 
            "text": "", 
            "title": "Setting options"
        }, 
        {
            "location": "/web-interface/#in-the-web-interface", 
            "text": "Expand the  options  tab to set parameters of homecage. Each option will apply to the current session. Use  save options  to permanaently save the options. Load the default options again with 'Load Default Options'.", 
            "title": "In the web interface"
        }, 
        {
            "location": "/web-interface/#on-the-pi", 
            "text": "The homecage options can be configured by editing the  homecage/homecage_app/config.json  file.  cd\npico homecage/homecage_app/config.json  The default file is:  {\n     hardware : {\n         irLightPin : 7, \n         whiteLightPin : 8,\n         temperatureSensor : 9, \n         temperatureInterval : 20 \n    }, \n     lights : {\n         controlLights : true, \n         sunset : 18, \n         sunrise : 6\n    }, \n     video : {\n         fileDuration : 10, \n         converttomp4 : true, \n         fps : 30, \n         resolution : [\n            1024, \n            768\n        ],\n         captureStill : true, \n         stillInterval : 2 \n    }, \n     stream : {\n         streamResolution : [\n            1024, \n            768\n        ]\n    }\n}", 
            "title": "On the Pi"
        }, 
        {
            "location": "/rest-interface/", 
            "text": "The homecage server will respond to the following REST calls.\n\n\nServer Status:\n\n\nGet runtime status of server\n\n\n/status\n\n\n\nGet user configured options\n\n\n/params\n\n\n\nRecord\n\n\nStart and stop video recording\n\n\n/record/1 \n/record/0\n\n\n\nStream\n\n\nStart and stop video streaming\n\n\n/stream/1 \n/stream/0\n\n\n\nLights\n\n\nTurn lights on and off\n\n\n/irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0\n\n\n\nImages\n\n\n/lastimage\n\n\n\nSet user options\n\n\n/set/fps/\nint:value\n \n/set/fileDuration/\nint:value", 
            "title": "REST interface"
        }, 
        {
            "location": "/rest-interface/#server-status", 
            "text": "Get runtime status of server  /status  Get user configured options  /params", 
            "title": "Server Status:"
        }, 
        {
            "location": "/rest-interface/#record", 
            "text": "Start and stop video recording  /record/1 \n/record/0", 
            "title": "Record"
        }, 
        {
            "location": "/rest-interface/#stream", 
            "text": "Start and stop video streaming  /stream/1 \n/stream/0", 
            "title": "Stream"
        }, 
        {
            "location": "/rest-interface/#lights", 
            "text": "Turn lights on and off  /irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0", 
            "title": "Lights"
        }, 
        {
            "location": "/rest-interface/#images", 
            "text": "/lastimage", 
            "title": "Images"
        }, 
        {
            "location": "/rest-interface/#set-user-options", 
            "text": "/set/fps/ int:value  \n/set/fileDuration/ int:value", 
            "title": "Set user options"
        }, 
        {
            "location": "/command-line/", 
            "text": "1) Log in to the Pi\n\n\nOn a Mac, use the terminal application in /Applications/Utilities/terminal.app\n\n\n# Type\nssh pi@10.16.80.162\n\n# Enter password\n[your_password]\n\n\n\nThe first time you login with ssh you will see the following and should answer 'yes'.\n\n\nThe authenticity of host '10.16.81.215 (10.16.81.215)' can't be established.\nECDSA key fingerprint is SHA256:2UPJc4irRdWsaMfpNcPy/EY4vOKPVNa/2gsN7INYBRw.\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\n2) Change into the homecage directory\n\n\nAt the command prompt, type\n\n\ncd\ncd homecage\n\n\n\n3) Get command help\n\n\nThe commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.\n\n\nTo get help, at the command prompt, type \n\n\n./help\n\n\n\nThis returns\n\n\n Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage\n\n\n\n4) Position the cages within a good field-of-view\n\n\nStart a video stream and then view the stream in a web browser.\n\n\nstream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream\n\n\n\nIn any browser, go to the address \nhttp://10.16.80.162:8080/stream\n\n\nWhile positioning cages, turn the white and or IR LEDs on and off\n\n\n# Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off\n\n\n\nWhen your happy with position, stop the video stream\n\n\nstream stop\n\n\n\n5) Start continuous video recording\n\n\nrecord start\n\n\n\nThis will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.\n\n\n6) Mount the file server to get your video files\n\n\nOn a Mac, use \nFinder -\n Go -\n Connect To Server...\n and log in as follows\n\n\nafp://10.16.80.162\nusername: pi\npassword: [your_password]\n\n\n\nFiles are saved in the \n/video/\n folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.\n\n\n7) Log out of the Pi\n\n\nexit", 
            "title": "Command line interface"
        }, 
        {
            "location": "/command-line/#1-log-in-to-the-pi", 
            "text": "On a Mac, use the terminal application in /Applications/Utilities/terminal.app  # Type\nssh pi@10.16.80.162\n\n# Enter password\n[your_password]  The first time you login with ssh you will see the following and should answer 'yes'.  The authenticity of host '10.16.81.215 (10.16.81.215)' can't be established.\nECDSA key fingerprint is SHA256:2UPJc4irRdWsaMfpNcPy/EY4vOKPVNa/2gsN7INYBRw.\nAre you sure you want to continue connecting (yes/no)?", 
            "title": "1) Log in to the Pi"
        }, 
        {
            "location": "/command-line/#2-change-into-the-homecage-directory", 
            "text": "At the command prompt, type  cd\ncd homecage", 
            "title": "2) Change into the homecage directory"
        }, 
        {
            "location": "/command-line/#3-get-command-help", 
            "text": "The commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.  To get help, at the command prompt, type   ./help  This returns   Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage", 
            "title": "3) Get command help"
        }, 
        {
            "location": "/command-line/#4-position-the-cages-within-a-good-field-of-view", 
            "text": "Start a video stream and then view the stream in a web browser.  stream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream  In any browser, go to the address  http://10.16.80.162:8080/stream  While positioning cages, turn the white and or IR LEDs on and off  # Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off  When your happy with position, stop the video stream  stream stop", 
            "title": "4) Position the cages within a good field-of-view"
        }, 
        {
            "location": "/command-line/#5-start-continuous-video-recording", 
            "text": "record start  This will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.", 
            "title": "5) Start continuous video recording"
        }, 
        {
            "location": "/command-line/#6-mount-the-file-server-to-get-your-video-files", 
            "text": "On a Mac, use  Finder -  Go -  Connect To Server...  and log in as follows  afp://10.16.80.162\nusername: pi\npassword: [your_password]  Files are saved in the  /video/  folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.", 
            "title": "6) Mount the file server to get your video files"
        }, 
        {
            "location": "/command-line/#7-log-out-of-the-pi", 
            "text": "exit", 
            "title": "7) Log out of the Pi"
        }, 
        {
            "location": "/mounting-the-file-server/", 
            "text": "MacOS\n\n\nThis assumes that apple-file-protocol (AFP) is installed and running on the Pi\n\n\nafp://[IP]\n\n\n\nWindows\n\n\nThis assumes Samba (SMB) is running and installed on the Pi\n\n\nsmb:\\\\[IP]", 
            "title": "Mounting the file server"
        }, 
        {
            "location": "/mounting-the-file-server/#macos", 
            "text": "This assumes that apple-file-protocol (AFP) is installed and running on the Pi  afp://[IP]", 
            "title": "MacOS"
        }, 
        {
            "location": "/mounting-the-file-server/#windows", 
            "text": "This assumes Samba (SMB) is running and installed on the Pi  smb:\\\\[IP]", 
            "title": "Windows"
        }, 
        {
            "location": "/wiring-the-system/", 
            "text": "Camera\n\n\nIt is worth while checking out the \nspecs\n as they are impressive.\n\n\nAttach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end. The blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens). In the picture below, you can't see the blue side of the ribbon as it is toward the ethenret port and towards the back of the camera.\n\n\n\n\nRaspberry Pi B+/2/3 pinout\n\n\n\n\nThe image above is a schematic of the layout of the pins on the Raspberry Pi. Each of the yellow numbered pins are digital input/output (DIO) pins. Your free to attach each component to the pin numbers of your choice. Just be sure that the pin numbers specified in the \nconfig.json\n file match the way you wired the system.\n\n\nHere are all the connections you want to make to set up the homecage system\n\n\n\n\n\n\n\n\nPin from Raspberry\n\n\nTo\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n8\n\n\nIn1 on relay\n\n\nWhite LED\n\n\n\n\n\n\n7\n\n\nIn2 on relay\n\n\nIR LED\n\n\n\n\n\n\n5 V\n\n\nVcc on relay\n\n\nPower 5V end of relay switch\n\n\n\n\n\n\nGround\n\n\nGND Relay\n\n\nPower 5V end of relay switch\n\n\n\n\n\n\n9\n\n\nDATA pin on DHT sensor\n\n\nRead temperature/humidity from DHT sensor\n\n\n\n\n\n\n5 V\n\n\nVCC pin on DHT sensor\n\n\nPower DHT sensor\n\n\n\n\n\n\nGround\n\n\nGND pin on DHT sensor\n\n\nPower DHT sensor\n\n\n\n\n\n\n\n\n5V and ground pins\n\n\nThere are multiple power and ground pins, use these to connect to the relay switch, the temperature sensor, and the light sensor. Conceptually, all the ground pins are the same, you can use a \nbread-board\n if you run out of ground pins.\n\n\nLights\n\n\nUse an external 12V AC/DC power supply.\n - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have anough current. A 1 Amp 12V adapter should be fine, don't worry, if it is under-powered your lights will be a little dim.\n\n\nUse a relay switch.\n - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, \nDO NOT\n work with AC power coming from the wall as it can kill you.\n\n\nThe relay switch effectively separates the 5V, Ground, and DIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. \n\n\nAll LEDs need resistors.\n - All LEDs need resistors. If your directly connect an LED to power and ground without a resistor you will burn the LED. All LEDs need a resistor wired in parallel, these are called 'current limiting resistor'.\n\n\nUse IR LEDs \n900 nm.\n - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.\n\n\n\n\nConnect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch.\n\n\nAll LEDs need resistors!\n\n\n\n\n\n\nUsing a 12V AC/DC adapter (1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (not negative) voltage when attached to the positive (normally red) end of the multi-meter.\n\n\n\n\n\n\nCut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.\n\n\n\n\n\n\nStick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter.\n\n\n\n\n\n\nDo the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter.\n\n\n\n\n\n\nOne important concept is that 'all grounds are the same'. This includes the ground on the 12V AC/DC adapter, the ground of the LEDs, the ground of theRaspberry Pi, etc.\n\n\nConnect the Pi to the relay switch switch\n\n\nConnect 4 wires from the Pi to the relay switch.\n\n\n\n\n\n\nConnect a DIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.\n\n\n\n\n\n\nConnect a second DIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.\n\n\n\n\n\n\nConnect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.\n\n\n\n\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the relay switch.\n\n\n\n\n\n\nDHT 22 temperature sensor\n\n\nThis is powered by the Raspberry Pi. Connect 3 wires from the Pi to the sensor.\n\n\n\n\n\n\nConnect a 5V pin from the pi to the 'VCC' pin on the sensor.\n\n\n\n\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the sensor.\n\n\n\n\n\n\nConnect a DIO pin from the Pi to the 'DATA' pin on the sensor.\n\n\n\n\n\n\n\n\nCombined visible and IR light sensor\n\n\nThis is powered by the Raspberry Pi. One example is a \nSI1145 Digital UV Index / IR / Visible Light Sensor\n. Your on your own to wire this.", 
            "title": "Wiring the system"
        }, 
        {
            "location": "/wiring-the-system/#camera", 
            "text": "It is worth while checking out the  specs  as they are impressive.  Attach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end. The blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens). In the picture below, you can't see the blue side of the ribbon as it is toward the ethenret port and towards the back of the camera.", 
            "title": "Camera"
        }, 
        {
            "location": "/wiring-the-system/#raspberry-pi-b23-pinout", 
            "text": "The image above is a schematic of the layout of the pins on the Raspberry Pi. Each of the yellow numbered pins are digital input/output (DIO) pins. Your free to attach each component to the pin numbers of your choice. Just be sure that the pin numbers specified in the  config.json  file match the way you wired the system.  Here are all the connections you want to make to set up the homecage system     Pin from Raspberry  To  Purpose      8  In1 on relay  White LED    7  In2 on relay  IR LED    5 V  Vcc on relay  Power 5V end of relay switch    Ground  GND Relay  Power 5V end of relay switch    9  DATA pin on DHT sensor  Read temperature/humidity from DHT sensor    5 V  VCC pin on DHT sensor  Power DHT sensor    Ground  GND pin on DHT sensor  Power DHT sensor", 
            "title": "Raspberry Pi B+/2/3 pinout"
        }, 
        {
            "location": "/wiring-the-system/#5v-and-ground-pins", 
            "text": "There are multiple power and ground pins, use these to connect to the relay switch, the temperature sensor, and the light sensor. Conceptually, all the ground pins are the same, you can use a  bread-board  if you run out of ground pins.", 
            "title": "5V and ground pins"
        }, 
        {
            "location": "/wiring-the-system/#lights", 
            "text": "Use an external 12V AC/DC power supply.  - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have anough current. A 1 Amp 12V adapter should be fine, don't worry, if it is under-powered your lights will be a little dim.  Use a relay switch.  - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter,  DO NOT  work with AC power coming from the wall as it can kill you.  The relay switch effectively separates the 5V, Ground, and DIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch.   All LEDs need resistors.  - All LEDs need resistors. If your directly connect an LED to power and ground without a resistor you will burn the LED. All LEDs need a resistor wired in parallel, these are called 'current limiting resistor'.  Use IR LEDs  900 nm.  - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.", 
            "title": "Lights"
        }, 
        {
            "location": "/wiring-the-system/#connect-a-12v-acdc-adapter-ir-and-white-lights-to-the-two-channel-relay-switch", 
            "text": "All LEDs need resistors!    Using a 12V AC/DC adapter (1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (not negative) voltage when attached to the positive (normally red) end of the multi-meter.    Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.    Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter.    Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter.    One important concept is that 'all grounds are the same'. This includes the ground on the 12V AC/DC adapter, the ground of the LEDs, the ground of theRaspberry Pi, etc.", 
            "title": "Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch."
        }, 
        {
            "location": "/wiring-the-system/#connect-the-pi-to-the-relay-switch-switch", 
            "text": "Connect 4 wires from the Pi to the relay switch.    Connect a DIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.    Connect a second DIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.    Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.    Connect a ground pin from the Pi to the 'GND' pin on the relay switch.", 
            "title": "Connect the Pi to the relay switch switch"
        }, 
        {
            "location": "/wiring-the-system/#dht-22-temperature-sensor", 
            "text": "This is powered by the Raspberry Pi. Connect 3 wires from the Pi to the sensor.    Connect a 5V pin from the pi to the 'VCC' pin on the sensor.    Connect a ground pin from the Pi to the 'GND' pin on the sensor.    Connect a DIO pin from the Pi to the 'DATA' pin on the sensor.", 
            "title": "DHT 22 temperature sensor"
        }, 
        {
            "location": "/wiring-the-system/#combined-visible-and-ir-light-sensor", 
            "text": "This is powered by the Raspberry Pi. One example is a  SI1145 Digital UV Index / IR / Visible Light Sensor . Your on your own to wire this.", 
            "title": "Combined visible and IR light sensor"
        }, 
        {
            "location": "/parts-list/", 
            "text": "Build a box to hold cages, lights, and camera\n\n\nStrap the computer to the side, place on top or put inside the box. If placing inside the box, make sure to make an inner box to block LEDs on computer.\n\n\n\n\nComputer\n\n\n\n\nRaspberry Pi 3 \nCanakit at Amazon\n\n\n5V AC/DC power, 2A\n\n\nSD card, class 10, 32 GB (for system installation, 16 GB is fine, class 10 is important)\n\n\nCase\n\n\n\n\n\n\nUSB key, 64 GB (to save video)\n\n\nEthernet cable\n\n\n\n\nCamera\n\n\n\n\nRaspberry Pi NoIR, 8 MP, Version 2\n.\n\n\nCSI Camera cable\n\n\n\n\nLights\n\n\n\n\n12V AC/DC adapter, 1 Amp\n\n\n2-channel relay\n (to switch lights on/off)\n\n\n850 nm IR LEDs\n. Don't use IR LEDs \n900nm as the camera is not very sensitive in this range and images will be grainy.\n\n\nWhite LEDs\n\n\nResistors to go inline with all LEDs. All LEDs need resistors!\n\n\n\n\nEnvironmental\n\n\n\n\nDHT 22 temperature and humidity sensor\n\n\nSI1145 Digital UV Index / IR / Visible Light Sensor", 
            "title": "Parts list"
        }, 
        {
            "location": "/parts-list/#computer", 
            "text": "Raspberry Pi 3  Canakit at Amazon  5V AC/DC power, 2A  SD card, class 10, 32 GB (for system installation, 16 GB is fine, class 10 is important)  Case    USB key, 64 GB (to save video)  Ethernet cable", 
            "title": "Computer"
        }, 
        {
            "location": "/parts-list/#camera", 
            "text": "Raspberry Pi NoIR, 8 MP, Version 2 .  CSI Camera cable", 
            "title": "Camera"
        }, 
        {
            "location": "/parts-list/#lights", 
            "text": "12V AC/DC adapter, 1 Amp  2-channel relay  (to switch lights on/off)  850 nm IR LEDs . Don't use IR LEDs  900nm as the camera is not very sensitive in this range and images will be grainy.  White LEDs  Resistors to go inline with all LEDs. All LEDs need resistors!", 
            "title": "Lights"
        }, 
        {
            "location": "/parts-list/#environmental", 
            "text": "DHT 22 temperature and humidity sensor  SI1145 Digital UV Index / IR / Visible Light Sensor", 
            "title": "Environmental"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Video recording\n\n\nManually capture a single image\n\n\nraspistill -o test.jpg\n\n\n\n\nVideo streaming\n\n\nCheck version of uv4l\n\n\n# type\nuv4l -i\n\n# returns\nUserspace Video4Linux\nCopyright (C) Luca Risolia \nluca.risolia@linux-projects.org\n\nVersion 1.9.12 built on Aug 15 2017\n\n\n\nRun uv4l by hand\n\n\nuv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\n\n\n\n\nBrowse the live stream at\n\n\nhttp://[IP]:8080\n\n\n\n\nStop uv4l (make sure all browser windows are closed)\n\n\nsudo pkill uv4l\n\n\n\n\nConverting h264 to mp4\n\n\nInstall ffmpeg on a mac\n\n\n\n\ninstall xcode\n\n\nactivate xcode command line tools\n\n\ninstall homebrew\n\n\n\n\nrun at command prompt\n\n\nbrew install ffmpeg --with-libvpx\n\n\n\n\n\n\nCheck the version of avconv\n\n\n# type\navconv -version\n\n# returns\nffmpeg version 3.2.9-1~deb9u1 Copyright (c) 2000-2017 the FFmpeg developers\nbuilt with gcc 6.3.0 (Raspbian 6.3.0-18+rpi1) 20170516\nconfiguration: --prefix=/usr --extra-version='1~deb9u1' --toolchain=hardened --libdir=/usr/lib/arm-linux-gnueabihf --incdir=/usr/include/arm-linux-gnueabihf --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libebur128 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\nlibavutil      55. 34.101 / 55. 34.101\nlibavcodec     57. 64.101 / 57. 64.101\nlibavformat    57. 56.101 / 57. 56.101\nlibavdevice    57.  1.100 / 57.  1.100\nlibavfilter     6. 65.100 /  6. 65.100\nlibavresample   3.  1.  0 /  3.  1.  0\nlibswscale      4.  2.100 /  4.  2.100\nlibswresample   2.  3.100 /  2.  3.100\nlibpostproc    54.  1.100 / 54.  1.100\n\n\n\nManually converting h264 files to mp4\n\n\nThe Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.\n\n\nUsing avconv\n\n\nBe careful as the \n-r\n versus \n-framerate\n for avconv are not documented.\n\n\nThis will convert all .h264 files in \na folder\n into .mp4 files with 15 fps.\n\n\n#!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\n${file%.*}\n\n   echo $filename\n   # 20180202, does not work\n   avconv -i \n$file\n -r $fps -vcodec copy \n$file.mp4\n\n   # this works\n   avconv -framerate $fps -i \n$file\n -vcodec copy \n$file.mp4\n\n   sleep 3\ndone\n\n\n\n\nUsing ffmpeg\n\n\nThis will convert all .h264 files in \na folder\n into .mp4 files with 15 fps.\n\n\n#!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\n${file%.*}\n\n   echo $filename\n   ffmpeg -r $fps -i \n$file\n -vcodec copy \n$file.mp4\n\n   sleep 3\ndone\n\n\n\n\nThis will recursively convert all .h264 files in a folder and \nall of its subfolders\n into .mp4 files.\n\n\n#!/bin/bash\nfps=15\nIFS=$'\\n'\nfor file in $(find . -iname '*.h264') ; do\n    #printf '%s\\n' \n$file\n\n    ffmpeg -r $fps -i \n$file\n -vcodec copy \n$file.mp4\n\ndone\n\n\n\n\nSee \nthis blog post\n\n\nRotate videos in ffmpeg\n\n\nFirst get desired angle by importing into keynote and manually rotating.\n\n\nffmpeg -i in.mp4 -vf \"rotate=-3*PI/180\" out.mp4\n\n\n\nConvert all .h264 files in a folder\n\n\nUsage:\n\n\n./convert /path/to/folder/with/h264/files\n\n\n\nScript:\n\n\n#!/bin/bash\n\n# 20180307\n# Robert Cudmore\n# http://robertcudmore.org, robert.cudmore@gmail.com\n#\n# This script will convert all .h264 files in given directory to .mp4 files using avconv\n# this will not overwrite if a matching .mp4 file already exists\n# Be sure to set fps to match the desired frames-per-second in your source .h264 files\n\n\n# set frames per second (fps) by hand\nfps=15\n\nfunction usage(){\n    echo \nconvert - Illegal parameters, expecting a valid folder path\n\n    echo \nUsage:\n\n    echo \n   ./convert /full/path/to/folder/with/h264/files\n\n}\n\n#\n# main\n\n# check that we get one input parameter (e.g. the folder path to convert)\nif [ \n$#\n -ne 1 ]; then\n    usage\n    exit 1\nfi\n\n\npath=\n$1\n\n\n# check that path exists\nif [ ! -d \n$path\n ]; then\n  # Control will enter here if $DIRECTORY doesn't exist.\n  echo 'path not found: '$path\n  exit 1\nfi\n\necho 'converting all .h264 file in: ' $path\n\nfor file in *.h264;\ndo\n   filename=\n${file%.*}\n\n   echo 'file:'$file\n\n   dstFile=$file.mp4\n   #echo 'dstFile:'$dstFile\n\n   # check if dstFile exists\n    if [ ! -f $dstFile ]; then\n        #echo \nFile not found!\n\n        echo '   Converting ' $file ' to ' $dstFile\n        avconv -loglevel 'error' -framerate $fps -i \n$file\n -vcodec copy \n$file.mp4\n\n        sleep 3\n    else\n        echo '   Not converting ' $file 'destination file already exists:' $dstFile\n    fi\n\ndone\n\nexit 0", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/#video-recording", 
            "text": "Manually capture a single image  raspistill -o test.jpg", 
            "title": "Video recording"
        }, 
        {
            "location": "/troubleshooting/#video-streaming", 
            "text": "Check version of uv4l  # type\nuv4l -i\n\n# returns\nUserspace Video4Linux\nCopyright (C) Luca Risolia  luca.risolia@linux-projects.org \nVersion 1.9.12 built on Aug 15 2017  Run uv4l by hand  uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on  Browse the live stream at  http://[IP]:8080  Stop uv4l (make sure all browser windows are closed)  sudo pkill uv4l", 
            "title": "Video streaming"
        }, 
        {
            "location": "/troubleshooting/#converting-h264-to-mp4", 
            "text": "Install ffmpeg on a mac   install xcode  activate xcode command line tools  install homebrew   run at command prompt  brew install ffmpeg --with-libvpx    Check the version of avconv  # type\navconv -version\n\n# returns\nffmpeg version 3.2.9-1~deb9u1 Copyright (c) 2000-2017 the FFmpeg developers\nbuilt with gcc 6.3.0 (Raspbian 6.3.0-18+rpi1) 20170516\nconfiguration: --prefix=/usr --extra-version='1~deb9u1' --toolchain=hardened --libdir=/usr/lib/arm-linux-gnueabihf --incdir=/usr/include/arm-linux-gnueabihf --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libebur128 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\nlibavutil      55. 34.101 / 55. 34.101\nlibavcodec     57. 64.101 / 57. 64.101\nlibavformat    57. 56.101 / 57. 56.101\nlibavdevice    57.  1.100 / 57.  1.100\nlibavfilter     6. 65.100 /  6. 65.100\nlibavresample   3.  1.  0 /  3.  1.  0\nlibswscale      4.  2.100 /  4.  2.100\nlibswresample   2.  3.100 /  2.  3.100\nlibpostproc    54.  1.100 / 54.  1.100", 
            "title": "Converting h264 to mp4"
        }, 
        {
            "location": "/troubleshooting/#manually-converting-h264-files-to-mp4", 
            "text": "The Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.", 
            "title": "Manually converting h264 files to mp4"
        }, 
        {
            "location": "/troubleshooting/#using-avconv", 
            "text": "Be careful as the  -r  versus  -framerate  for avconv are not documented.  This will convert all .h264 files in  a folder  into .mp4 files with 15 fps.  #!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename= ${file%.*} \n   echo $filename\n   # 20180202, does not work\n   avconv -i  $file  -r $fps -vcodec copy  $file.mp4 \n   # this works\n   avconv -framerate $fps -i  $file  -vcodec copy  $file.mp4 \n   sleep 3\ndone", 
            "title": "Using avconv"
        }, 
        {
            "location": "/troubleshooting/#using-ffmpeg", 
            "text": "This will convert all .h264 files in  a folder  into .mp4 files with 15 fps.  #!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename= ${file%.*} \n   echo $filename\n   ffmpeg -r $fps -i  $file  -vcodec copy  $file.mp4 \n   sleep 3\ndone  This will recursively convert all .h264 files in a folder and  all of its subfolders  into .mp4 files.  #!/bin/bash\nfps=15\nIFS=$'\\n'\nfor file in $(find . -iname '*.h264') ; do\n    #printf '%s\\n'  $file \n    ffmpeg -r $fps -i  $file  -vcodec copy  $file.mp4 \ndone  See  this blog post", 
            "title": "Using ffmpeg"
        }, 
        {
            "location": "/troubleshooting/#rotate-videos-in-ffmpeg", 
            "text": "First get desired angle by importing into keynote and manually rotating.  ffmpeg -i in.mp4 -vf \"rotate=-3*PI/180\" out.mp4", 
            "title": "Rotate videos in ffmpeg"
        }, 
        {
            "location": "/troubleshooting/#convert-all-h264-files-in-a-folder", 
            "text": "Usage:  ./convert /path/to/folder/with/h264/files  Script:  #!/bin/bash\n\n# 20180307\n# Robert Cudmore\n# http://robertcudmore.org, robert.cudmore@gmail.com\n#\n# This script will convert all .h264 files in given directory to .mp4 files using avconv\n# this will not overwrite if a matching .mp4 file already exists\n# Be sure to set fps to match the desired frames-per-second in your source .h264 files\n\n\n# set frames per second (fps) by hand\nfps=15\n\nfunction usage(){\n    echo  convert - Illegal parameters, expecting a valid folder path \n    echo  Usage: \n    echo     ./convert /full/path/to/folder/with/h264/files \n}\n\n#\n# main\n\n# check that we get one input parameter (e.g. the folder path to convert)\nif [  $#  -ne 1 ]; then\n    usage\n    exit 1\nfi\n\n\npath= $1 \n\n# check that path exists\nif [ ! -d  $path  ]; then\n  # Control will enter here if $DIRECTORY doesn't exist.\n  echo 'path not found: '$path\n  exit 1\nfi\n\necho 'converting all .h264 file in: ' $path\n\nfor file in *.h264;\ndo\n   filename= ${file%.*} \n   echo 'file:'$file\n\n   dstFile=$file.mp4\n   #echo 'dstFile:'$dstFile\n\n   # check if dstFile exists\n    if [ ! -f $dstFile ]; then\n        #echo  File not found! \n        echo '   Converting ' $file ' to ' $dstFile\n        avconv -loglevel 'error' -framerate $fps -i  $file  -vcodec copy  $file.mp4 \n        sleep 3\n    else\n        echo '   Not converting ' $file 'destination file already exists:' $dstFile\n    fi\n\ndone\n\nexit 0", 
            "title": "Convert all .h264 files in a folder"
        }, 
        {
            "location": "/images/", 
            "text": "These are images of the homecage at various developmental stages\n\n\nv0.0\n\n\nOverview\n\n\n\n\n\n\nLights and camera\n\n\n\n\n\n\nRats nest", 
            "title": "Images"
        }, 
        {
            "location": "/images/#v00", 
            "text": "", 
            "title": "v0.0"
        }, 
        {
            "location": "/images/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/images/#lights-and-camera", 
            "text": "", 
            "title": "Lights and camera"
        }, 
        {
            "location": "/images/#rats-nest", 
            "text": "", 
            "title": "Rats nest"
        }, 
        {
            "location": "/implementation-details/", 
            "text": "Once running, the homecage system should be simple to use. Yet, for this simple system to work, a number of independent components must each work and must communicate with each other. As is often the case, the implementation details to create a simple system is complex. Two cliches to describe this is 'you can't fly with half a wing' and 'the devil is in the details'.\n\n\nWe have about 15 components in use! Each component is developed independently and all are open source. It is amazing that this system works? What follows is a description of the different pieces of the homecage system with links to the source code and the components that are used.\n\n\nRaspberry Pi system\n\n\nDon't forget the Raspberry Pi! It is open-source hardware made by the \nRaspberry Pi Foundation\n. It is running a variant of the \nDebian\n operating system called \nRaspbian\n.\n\n\nDocumentation\n\n\nThis website is written in \nmarkdown\n. The markdown and a description of the contents using \nyaml\n are brought together, compiled, and a static site is generated by \nmkdocs\n. The final layout is controlled by an mkdocs theme called \nmaterial\n.\n\n\nFront end\n\n\n\n\n\n\nindex.html\n - Main web interface written in \nhtml\n, uses \nJavascript\n and the Javascript \nAngular\n library to provide dynamic and real-time content.\n\n\n\n\n\n\nvideolist.html\n - Again, an html web page but this time using \nJinja\n as a template engine. Jinja is default template engine used by Flask.\n\n\n\n\n\n\nhello.js\n - \nJavascript\n code that implementes the logic of the web interface. Has functions that get called when user is clicking. Also has function to talk to \nhomecage_app.py\n web server via a \nREST\n interface. This is not standard Javascript but is using the \nAngular\n library.\n\n\n\n\n\n\nhello.css\n - A \nCascading Style Sheet (css)\n text file that describes the precise layout of the web pages.\n\n\n\n\n\n\nBack end\n\n\n\n\n\n\nhome.py\n - The \npython\n back-end that runs everything. This includes controlling DIO pins to turn lights on/off, running \nbash\n scripts to start/stop the video and to convert .h264 video files to .mp4. This code provides a clearly defined application programming interface (API) to all these components such that the web server in \nhomecage_app.py\n has an easier job.\n\n\n\n\n\n\nhomecage_app.py\n - Python code that uses the \nFlask\n library to run the web-server and provide bi-directional control of the \nhome.py\n back-end. In one direction, it accepts web url requests and sends them to the backend, in the other direction, it accesses the back-end and send information back out to the web clients. This  primarily implements a \nREST\n interface so a client-side browser can get and set server values without explicitly logging in to the server.\n\n\n\n\n\n\nconfig.json\n - A text file written in \njson\n that provides human editable configuration options for the server.\n\n\n\n\n\n\nuv4l\n\n\n\n\nstream\n - \nBash shell\n script to start stop streaming with the \nuv4l\n library.\n\n\n\n\navconv\n\n\n\n\nconvert_video.sh\n - Bash shell script to convert a .h264 video file into .mp4. Uses avconv function which is part of \nlibav\n library.", 
            "title": "Implementation details"
        }, 
        {
            "location": "/implementation-details/#raspberry-pi-system", 
            "text": "Don't forget the Raspberry Pi! It is open-source hardware made by the  Raspberry Pi Foundation . It is running a variant of the  Debian  operating system called  Raspbian .", 
            "title": "Raspberry Pi system"
        }, 
        {
            "location": "/implementation-details/#documentation", 
            "text": "This website is written in  markdown . The markdown and a description of the contents using  yaml  are brought together, compiled, and a static site is generated by  mkdocs . The final layout is controlled by an mkdocs theme called  material .", 
            "title": "Documentation"
        }, 
        {
            "location": "/implementation-details/#front-end", 
            "text": "index.html  - Main web interface written in  html , uses  Javascript  and the Javascript  Angular  library to provide dynamic and real-time content.    videolist.html  - Again, an html web page but this time using  Jinja  as a template engine. Jinja is default template engine used by Flask.    hello.js  -  Javascript  code that implementes the logic of the web interface. Has functions that get called when user is clicking. Also has function to talk to  homecage_app.py  web server via a  REST  interface. This is not standard Javascript but is using the  Angular  library.    hello.css  - A  Cascading Style Sheet (css)  text file that describes the precise layout of the web pages.", 
            "title": "Front end"
        }, 
        {
            "location": "/implementation-details/#back-end", 
            "text": "home.py  - The  python  back-end that runs everything. This includes controlling DIO pins to turn lights on/off, running  bash  scripts to start/stop the video and to convert .h264 video files to .mp4. This code provides a clearly defined application programming interface (API) to all these components such that the web server in  homecage_app.py  has an easier job.    homecage_app.py  - Python code that uses the  Flask  library to run the web-server and provide bi-directional control of the  home.py  back-end. In one direction, it accepts web url requests and sends them to the backend, in the other direction, it accesses the back-end and send information back out to the web clients. This  primarily implements a  REST  interface so a client-side browser can get and set server values without explicitly logging in to the server.    config.json  - A text file written in  json  that provides human editable configuration options for the server.", 
            "title": "Back end"
        }, 
        {
            "location": "/implementation-details/#uv4l", 
            "text": "stream  -  Bash shell  script to start stop streaming with the  uv4l  library.", 
            "title": "uv4l"
        }, 
        {
            "location": "/implementation-details/#avconv", 
            "text": "convert_video.sh  - Bash shell script to convert a .h264 video file into .mp4. Uses avconv function which is part of  libav  library.", 
            "title": "avconv"
        }, 
        {
            "location": "/dev-notes/", 
            "text": "Change Log\n\n\n20180307\n\n\nAdded script to convert all .h264 to .mp4 (without replacement), uses avconv. See homecage/convert for script and dev notes for a copy of the script.\n\n\n20180202\n\n\nAdded code to command line to convert .h264 to .mp4 at end of video recorindg.\n\n\nSee \nvideo.py\n:\n\n\nprint '    Converting from .h264 to .mp4 with convert_video.sh (avconv)'\ncmd = './convert_video.sh ' + thisVideoFile + ' ' + str(fps)\nchild = subprocess.Popen(cmd, shell=True)\nout, err = child.communicate()\n\n\n\n\nBe careful as avconv uses \n-framerate\n and not \n-r\n as is with ffmpeg. See \nconvert_video.sh\n:\n\n\ncmd=\navconv -loglevel error -framerate $2 -i $1 -vcodec copy -r $2 $dstfile\n\necho \n    \n$cmd\n\n\n\n\n20171201\n\n\n\n\nAdded dialog when stopping video\n\n\nadded 'videolist.html' page to display list of video and play on click !\n\n\nnow converting .h264 to .mp4\n\n\nadded to config.json as 'config.video.converttomp4: true'\n\n\nadded bash script convert_video.sh, to do conversion\n\n\ncall bash script when video is done (in thread)\n\n\nadded documentation to install avconv\n\n\n\n\n\n\nnow saving into date folder\n\n\n\n\n20171111\n\n\n\n\nfinish index.html interface, mostly adding interface to change self.config\n\n\nsplit self.config (from config.json) and self.status (runtime variables)\n\n\nadd in dht sensor code\n\n\nadd in white and ir sensor code\n\n\n\n\n20171101\n\n\n\n\nStarted rewriting homecage to include (i) command line control, (ii) web interface. Previous version required manually running both lights and video as separate processes using \nsreen\n.\n\n\n\n\nmkDocs\n\n\nWe use \nmkdocs\n to generate the documentation website from markdown files.\n\n\nInstall\n\n\npip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material\n\n\n\nServe locally\n\n\ncd\ncd homecage/docs\nmkdocs serve\n\n\n\nPush to github\n\n\ncd\ncd homecage/docs\nmkdocs gh-deploy --clean\n\n\n\nuv4l\n\n\nuv4l is what we use to stream live video.\n\n\n20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned \ndefunct\n process that can't actually be kill(ed). This was mucking up any future interaciton as \nstream\n, \nrecord\n, and \nstatus\n thought there was still a uv4l process.\n\n\nSent this to uv4l people\n\n\nHi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a \ndefunct\n\nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?\n\n\n\n\nAnswer was to kill child processes first. Get child processes of PID with `pstree -p PID'\n\n\nWhich eventually led to this\n\n\n# get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a `\ndefunct\n` uv4l !\nsudo kill -- -PID\n\n\n\n\nRemove uv4l-raspicam-extras\n\n\nsudo apt-get remove uv4l-raspicam-extras", 
            "title": "Development notes"
        }, 
        {
            "location": "/dev-notes/#change-log", 
            "text": "", 
            "title": "Change Log"
        }, 
        {
            "location": "/dev-notes/#20180307", 
            "text": "Added script to convert all .h264 to .mp4 (without replacement), uses avconv. See homecage/convert for script and dev notes for a copy of the script.", 
            "title": "20180307"
        }, 
        {
            "location": "/dev-notes/#20180202", 
            "text": "Added code to command line to convert .h264 to .mp4 at end of video recorindg.  See  video.py :  print '    Converting from .h264 to .mp4 with convert_video.sh (avconv)'\ncmd = './convert_video.sh ' + thisVideoFile + ' ' + str(fps)\nchild = subprocess.Popen(cmd, shell=True)\nout, err = child.communicate()  Be careful as avconv uses  -framerate  and not  -r  as is with ffmpeg. See  convert_video.sh :  cmd= avconv -loglevel error -framerate $2 -i $1 -vcodec copy -r $2 $dstfile \necho       $cmd", 
            "title": "20180202"
        }, 
        {
            "location": "/dev-notes/#20171201", 
            "text": "Added dialog when stopping video  added 'videolist.html' page to display list of video and play on click !  now converting .h264 to .mp4  added to config.json as 'config.video.converttomp4: true'  added bash script convert_video.sh, to do conversion  call bash script when video is done (in thread)  added documentation to install avconv    now saving into date folder", 
            "title": "20171201"
        }, 
        {
            "location": "/dev-notes/#20171111", 
            "text": "finish index.html interface, mostly adding interface to change self.config  split self.config (from config.json) and self.status (runtime variables)  add in dht sensor code  add in white and ir sensor code", 
            "title": "20171111"
        }, 
        {
            "location": "/dev-notes/#20171101", 
            "text": "Started rewriting homecage to include (i) command line control, (ii) web interface. Previous version required manually running both lights and video as separate processes using  sreen .", 
            "title": "20171101"
        }, 
        {
            "location": "/dev-notes/#mkdocs", 
            "text": "We use  mkdocs  to generate the documentation website from markdown files.  Install  pip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material  Serve locally  cd\ncd homecage/docs\nmkdocs serve  Push to github  cd\ncd homecage/docs\nmkdocs gh-deploy --clean", 
            "title": "mkDocs"
        }, 
        {
            "location": "/dev-notes/#uv4l", 
            "text": "uv4l is what we use to stream live video.  20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned  defunct  process that can't actually be kill(ed). This was mucking up any future interaciton as  stream ,  record , and  status  thought there was still a uv4l process.", 
            "title": "uv4l"
        }, 
        {
            "location": "/dev-notes/#sent-this-to-uv4l-people", 
            "text": "Hi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a  defunct \nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?  Answer was to kill child processes first. Get child processes of PID with `pstree -p PID'  Which eventually led to this  # get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a ` defunct ` uv4l !\nsudo kill -- -PID", 
            "title": "Sent this to uv4l people"
        }, 
        {
            "location": "/dev-notes/#remove-uv4l-raspicam-extras", 
            "text": "sudo apt-get remove uv4l-raspicam-extras", 
            "title": "Remove uv4l-raspicam-extras"
        }
    ]
}