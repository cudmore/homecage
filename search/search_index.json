{
    "docs": [
        {
            "location": "/",
            "text": "Homecage is a general purpose camera controller that runs on a \nRaspberry Pi computer\n using a \nPi NoIR camera\n.\n\n\nFeatures\n\n\n\n\nRecord video 24/7\n\n\nAutomaticall controls day-time and night-time lights.\n\n\nLive video streaming to a web browser\n\n\nHardware triggers to start and stop video recording and watermark video with frames\n\n\nVideo wall to control any number of Raspberry Pi's, each with their own copy of homecage\n\n\n\n\nInterface options\n\n\n\n\nWeb\n - A point and click web browser interface.\n\n\nVideo Wall\n - A web interface to control any number of Pi computers running homecage\n\n\nREST\n - A rest interface to communicate with a homecage server",
            "title": "Home"
        },
        {
            "location": "/#features",
            "text": "Record video 24/7  Automaticall controls day-time and night-time lights.  Live video streaming to a web browser  Hardware triggers to start and stop video recording and watermark video with frames  Video wall to control any number of Raspberry Pi's, each with their own copy of homecage",
            "title": "Features"
        },
        {
            "location": "/#interface-options",
            "text": "Web  - A point and click web browser interface.  Video Wall  - A web interface to control any number of Pi computers running homecage  REST  - A rest interface to communicate with a homecage server",
            "title": "Interface options"
        },
        {
            "location": "/installing-the-software/",
            "text": "Install homecage\n\n\nWe will assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our \nsetup intructions\n. We will also assume you are logged in to the Pi using terminal on OSX or \nPutty\n on Windows.\n\n\n1) Check your system\n\n\nHomecage runs best on a Raspberry 2/3 and Debian Stretch. \nDo not run it on Raspberry Model B, it is too slow\n.\n\n\nCheck which version of the Raspberry Pi you have.\n\n\n#at a command prompt, type\ncat /proc/device-tree/model\n\n#you should get something like this\nRaspberry Pi 3 Model B Rev 1.2\n\n\n\n\nCheck which version of the Debian operating system you have. You should use Debian Stretch if possible\n\n\n#at a command prompt, type\ncat /etc/os-release\n\n#you should get something like this\nPRETTY_NAME=\"Raspbian GNU/Linux 9 (stretch)\"\nNAME=\"Raspbian GNU/Linux\"\nVERSION_ID=\"9\"\nVERSION=\"9 (stretch)\"\n\n\n\n\n2) Clone the homecage repository\n\n\nThis will make a folder \nhomecage\n in your root directory. You can always return to your root directory with \ncd\n.\n\n\n# if you don't already have git installed\nsudo apt-get install git\n\ngit clone --depth=1 https://github.com/cudmore/homecage.git\n\n\n\n3) Install homecage with our install script\n\n\n# at a command prompt, type\ncd homecage/homecage_app\n./install.sh\n\n\n\nIf everything goes well, all the software should be ready to go. Point your browser to\n\n\nhttp://[your_ip]:5000\n\n\n\n3.1) Or manually install python packages globally\n\n\n# if you don't already have pip installed (see troubleshooting)\nsudo apt-get install python-pip\n\ncd ~/homecage/homecage_app\npip install -r requirements.txt\n\n\n\nRun homecage_app.py\n\n\ncd ~/homecage/homecage_app\npython homecage_app.py\n\n\n\nBrowse to the homecage_app website\n\n\nhttp://[yourip]:5000\n\n\n\n3.2) Or manually install in a virtual environment\n\n\nInstalling into a Python virtual environment is a good idea as it isolates the installation of home cage from your system.\n\n\nMake a clean virtual environment that does not depend on current installed Python packages.\n\n\n# if you don't already have pip installed (see troubleshooting)\nsudo apt-get install python-pip\n\n# install virtualenv if necessary (see troubleshooting)\npip install virtualenv\n\n# if you still can't use virtualenv, then install like this\nsudo /usr/bin/easy_install virtualenv\n\n# make a folder to hold the virtual environment\ncd ~/homecage\nmkdir env\n\n# either make a python 2 environment in the folder 'env'\n#virtualenv -p python2 --no-site-packages env\n\n# or make a python 3 environment in the folder 'env'\nvirtualenv -p python3 --no-site-packages env\n\n\n\nActivate the environment. Once activated, the command prompt will begin with '(env)'\n\n\nsource env/bin/activate\n\n\n\nInstall homecage_app dependencies\n\n\ncd ~/homecage/homecage_app\npip install -r requirements.txt\n\n\n\nRun homecage_app.py\n\n\ncd ~/homecage/homecage_app\npython homecage_app.py\n\n\n\nBrowse to the homecage_app website\n\n\nhttp://[yourip]:5000\n\n\n\nTo exit the virtual Python environment\n\n\ndeactivate\n\n\n\n4) Manually install uv4l and avconv\n\n\nHomecage uses uv4l to stream video to the web and avconv to convert h264 video files to mp4.\n\n\n4.1) Manually install uv4l for live video streaming (optional)\n\n\nIf you run into trouble, then follow \nthis tutorial\n. If you don't do this, homecage will work but you won't be able to stream.\n\n\nBecause uv4l is complicated, \nthis will only work in Raspian Stretch\n\n\n# at a comman prompt, type\ncurl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# edit /etc/apt/sources.list\nsudo pico /etc/apt/sources.list\n\n# add the following line to /etc/apt/sources.list\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\n# update and install uv4l\nsudo apt-get update\nsudo apt-get install uv4l uv4l-server uv4l-raspicam\n\n\n\n\n4.2) Manually install avconv to convert videos from .h264 to .mp4 (optional)\n\n\nIf you run into trouble, then see \nthis blog post\n. If you don't do this, make sure you turn off the 'Convert video from h264 to mp4' option.\n\n\nsudo apt-get update\nsudo apt-get install libav-tools\n\n\n\nVideo files will be saved to \n/home/pi/video\n. If your going to save a lot of video, please \nmount a usb key\n and save videos there.",
            "title": "Install"
        },
        {
            "location": "/installing-the-software/#install-homecage",
            "text": "We will assume you have a functioning Raspberry Pi. To get started setting up a Pi from scratch, see our  setup intructions . We will also assume you are logged in to the Pi using terminal on OSX or  Putty  on Windows.",
            "title": "Install homecage"
        },
        {
            "location": "/installing-the-software/#1-check-your-system",
            "text": "Homecage runs best on a Raspberry 2/3 and Debian Stretch.  Do not run it on Raspberry Model B, it is too slow .  Check which version of the Raspberry Pi you have.  #at a command prompt, type\ncat /proc/device-tree/model\n\n#you should get something like this\nRaspberry Pi 3 Model B Rev 1.2  Check which version of the Debian operating system you have. You should use Debian Stretch if possible  #at a command prompt, type\ncat /etc/os-release\n\n#you should get something like this\nPRETTY_NAME=\"Raspbian GNU/Linux 9 (stretch)\"\nNAME=\"Raspbian GNU/Linux\"\nVERSION_ID=\"9\"\nVERSION=\"9 (stretch)\"",
            "title": "1) Check your system"
        },
        {
            "location": "/installing-the-software/#2-clone-the-homecage-repository",
            "text": "This will make a folder  homecage  in your root directory. You can always return to your root directory with  cd .  # if you don't already have git installed\nsudo apt-get install git\n\ngit clone --depth=1 https://github.com/cudmore/homecage.git",
            "title": "2) Clone the homecage repository"
        },
        {
            "location": "/installing-the-software/#3-install-homecage-with-our-install-script",
            "text": "# at a command prompt, type\ncd homecage/homecage_app\n./install.sh  If everything goes well, all the software should be ready to go. Point your browser to  http://[your_ip]:5000",
            "title": "3) Install homecage with our install script"
        },
        {
            "location": "/installing-the-software/#31-or-manually-install-python-packages-globally",
            "text": "# if you don't already have pip installed (see troubleshooting)\nsudo apt-get install python-pip\n\ncd ~/homecage/homecage_app\npip install -r requirements.txt  Run homecage_app.py  cd ~/homecage/homecage_app\npython homecage_app.py  Browse to the homecage_app website  http://[yourip]:5000",
            "title": "3.1) Or manually install python packages globally"
        },
        {
            "location": "/installing-the-software/#32-or-manually-install-in-a-virtual-environment",
            "text": "Installing into a Python virtual environment is a good idea as it isolates the installation of home cage from your system.  Make a clean virtual environment that does not depend on current installed Python packages.  # if you don't already have pip installed (see troubleshooting)\nsudo apt-get install python-pip\n\n# install virtualenv if necessary (see troubleshooting)\npip install virtualenv\n\n# if you still can't use virtualenv, then install like this\nsudo /usr/bin/easy_install virtualenv\n\n# make a folder to hold the virtual environment\ncd ~/homecage\nmkdir env\n\n# either make a python 2 environment in the folder 'env'\n#virtualenv -p python2 --no-site-packages env\n\n# or make a python 3 environment in the folder 'env'\nvirtualenv -p python3 --no-site-packages env  Activate the environment. Once activated, the command prompt will begin with '(env)'  source env/bin/activate  Install homecage_app dependencies  cd ~/homecage/homecage_app\npip install -r requirements.txt  Run homecage_app.py  cd ~/homecage/homecage_app\npython homecage_app.py  Browse to the homecage_app website  http://[yourip]:5000  To exit the virtual Python environment  deactivate",
            "title": "3.2) Or manually install in a virtual environment"
        },
        {
            "location": "/installing-the-software/#4-manually-install-uv4l-and-avconv",
            "text": "Homecage uses uv4l to stream video to the web and avconv to convert h264 video files to mp4.",
            "title": "4) Manually install uv4l and avconv"
        },
        {
            "location": "/installing-the-software/#41-manually-install-uv4l-for-live-video-streaming-optional",
            "text": "If you run into trouble, then follow  this tutorial . If you don't do this, homecage will work but you won't be able to stream.  Because uv4l is complicated,  this will only work in Raspian Stretch  # at a comman prompt, type\ncurl http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc | sudo apt-key add -\n\n# edit /etc/apt/sources.list\nsudo pico /etc/apt/sources.list\n\n# add the following line to /etc/apt/sources.list\ndeb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n\n# update and install uv4l\nsudo apt-get update\nsudo apt-get install uv4l uv4l-server uv4l-raspicam",
            "title": "4.1) Manually install uv4l for live video streaming (optional)"
        },
        {
            "location": "/installing-the-software/#42-manually-install-avconv-to-convert-videos-from-h264-to-mp4-optional",
            "text": "If you run into trouble, then see  this blog post . If you don't do this, make sure you turn off the 'Convert video from h264 to mp4' option.  sudo apt-get update\nsudo apt-get install libav-tools  Video files will be saved to  /home/pi/video . If your going to save a lot of video, please  mount a usb key  and save videos there.",
            "title": "4.2) Manually install avconv to convert videos from .h264 to .mp4 (optional)"
        },
        {
            "location": "/install-extras/",
            "text": "File Server\n\n\nIt is easy to make the Raspberry Pi a file server. Once either Apple-File-protocol (afp) or Samba (smb) are installed you can mount the Raspberry Pi like any other file server.\n\n\nMacOS\n\n\nThe Pi can be manually mounted from MacOS by going to \nGo - Connect To Server...\n and entering \nafp://IP\n where IP is the IP address of your Pi.\n\n\nWindows\n\n\nTo mount the Pi in Windows, click on the Start menu and type \nsmb:\\\\IP\n where IP is the IP address of your Pi.\n\n\nInstall Apple-file-protocol (afp, also known as Netatalk)\n\n\nThis will make the Pi an apple-file-protocol file-server that can be accessed in MacOS.\n\n\nsudo apt-get install netatalk\n\n\n\nOnce netatalk is installed, the Raspberry will show up in the Mac Finder 'Shared' section. \n\n\nChange the default name of your Pi in netatalk\n\n\nWhen you mount the pi on MacOS, it will mount as 'Home Directory' and the space in 'Home Directory' will cause problems. Change the name to something like 'pi3'.\n\n\nSee \nthis blog post\n to change the name of the mount point from 'Home Directory'.    \n\n\nIn the following \nthe_name_you_want\n should be changed to the name you want.\n\n\n# stop netatalk\nsudo /etc/init.d/netatalk stop\n\n# edit config file\nsudo pico /etc/netatalk/AppleVolumes.default\n\n# change this one line\n\n# By default all users have access to their home directories.\n#~/                     \"Home Directory\"\n~/                      \"the_name_you_want\"\n\n# restart netatalk\nsudo /etc/init.d/netatalk start\n\n\n\nWhen in pico, you can search for a string with control+w and you can exit with control+x.\n\n\nInstall Samba (smb)\n\n\nThis will make the Pi a Samba (SMB) file server that can be accessed from both Windows and MacOS.\n\n\nsudo apt-get install samba samba-common-bin\n\n\n\nEdit \n/etc/samba/smb.conf\n\n\nsudo pico /etc/samba/smb.conf\n\n\n\nAdd the following\n\n\n[share]\nComment = Pi shared folder\nPath = /home/pi\nBrowseable = yes\nWriteable = Yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n\n\n\nAdd a password\n\n\nsudo smbpasswd -a pi\n\n\n\nRestart samba\n\n\nsudo /etc/init.d/samba restart\n\n\n\nTest the server from another machine on the network. On a windows machine, mount the fileserver with \nsmb:\\\\IP\n where IP is the IP address of your pi.\n\n\nInstall DHT temperature sensor (optional)\n\n\nYou can acquire reasonably accurate temperature and humidity readings with an inexpensive temperature sensort like the \nDHT-Temperature Sensor\n. If you run into trouble then go to \nthis tutorial\n. If you don't do this, homecage should work but you won't be able to read the temperature and humidity.\n\n\ncd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install\n\n\n\nStartup tweet\n\n\nHave the Pi send a tweet with its IP when it boots. See \nthis blog post\n for instructions.\n\n\nStartup mailer\n\n\nHave the Pi send an email with its IP address when it boots. See \nthis blog post\n for instructions. An example python script is here, \nstartup_mailer.py",
            "title": "Install extras"
        },
        {
            "location": "/install-extras/#file-server",
            "text": "It is easy to make the Raspberry Pi a file server. Once either Apple-File-protocol (afp) or Samba (smb) are installed you can mount the Raspberry Pi like any other file server.",
            "title": "File Server"
        },
        {
            "location": "/install-extras/#macos",
            "text": "The Pi can be manually mounted from MacOS by going to  Go - Connect To Server...  and entering  afp://IP  where IP is the IP address of your Pi.",
            "title": "MacOS"
        },
        {
            "location": "/install-extras/#windows",
            "text": "To mount the Pi in Windows, click on the Start menu and type  smb:\\\\IP  where IP is the IP address of your Pi.",
            "title": "Windows"
        },
        {
            "location": "/install-extras/#install-apple-file-protocol-afp-also-known-as-netatalk",
            "text": "This will make the Pi an apple-file-protocol file-server that can be accessed in MacOS.  sudo apt-get install netatalk  Once netatalk is installed, the Raspberry will show up in the Mac Finder 'Shared' section.",
            "title": "Install Apple-file-protocol (afp, also known as Netatalk)"
        },
        {
            "location": "/install-extras/#change-the-default-name-of-your-pi-in-netatalk",
            "text": "When you mount the pi on MacOS, it will mount as 'Home Directory' and the space in 'Home Directory' will cause problems. Change the name to something like 'pi3'.  See  this blog post  to change the name of the mount point from 'Home Directory'.      In the following  the_name_you_want  should be changed to the name you want.  # stop netatalk\nsudo /etc/init.d/netatalk stop\n\n# edit config file\nsudo pico /etc/netatalk/AppleVolumes.default\n\n# change this one line\n\n# By default all users have access to their home directories.\n#~/                     \"Home Directory\"\n~/                      \"the_name_you_want\"\n\n# restart netatalk\nsudo /etc/init.d/netatalk start  When in pico, you can search for a string with control+w and you can exit with control+x.",
            "title": "Change the default name of your Pi in netatalk"
        },
        {
            "location": "/install-extras/#install-samba-smb",
            "text": "This will make the Pi a Samba (SMB) file server that can be accessed from both Windows and MacOS.  sudo apt-get install samba samba-common-bin  Edit  /etc/samba/smb.conf  sudo pico /etc/samba/smb.conf  Add the following  [share]\nComment = Pi shared folder\nPath = /home/pi\nBrowseable = yes\nWriteable = Yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no  Add a password  sudo smbpasswd -a pi  Restart samba  sudo /etc/init.d/samba restart  Test the server from another machine on the network. On a windows machine, mount the fileserver with  smb:\\\\IP  where IP is the IP address of your pi.",
            "title": "Install Samba (smb)"
        },
        {
            "location": "/install-extras/#install-dht-temperature-sensor-optional",
            "text": "You can acquire reasonably accurate temperature and humidity readings with an inexpensive temperature sensort like the  DHT-Temperature Sensor . If you run into trouble then go to  this tutorial . If you don't do this, homecage should work but you won't be able to read the temperature and humidity.  cd\nmkdir tmp\ncd tmp\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git\ncd Adafruit_Python_DHT\nsudo python setup.py install",
            "title": "Install DHT temperature sensor (optional)"
        },
        {
            "location": "/install-extras/#startup-tweet",
            "text": "Have the Pi send a tweet with its IP when it boots. See  this blog post  for instructions.",
            "title": "Startup tweet"
        },
        {
            "location": "/install-extras/#startup-mailer",
            "text": "Have the Pi send an email with its IP address when it boots. See  this blog post  for instructions. An example python script is here,  startup_mailer.py",
            "title": "Startup mailer"
        },
        {
            "location": "/web-interface/",
            "text": "Running the web server\n\n\nLogin to the Pi\n\n\nssh pi@[your_pi_ip]\n\n\n\nWhere [your_pi_ip] is the IP address of your Pi.\n\n\nAt a command prompt, type:\n\n\ncd\ncd homecage/homecage_app\npython homecage_app.py\n\n\n\n\nOnce \nhomecage_app.py\n is running you can access the web server in a browser with the address:\n\n\nhttp:[your_pi_ip]:5000\n\n\n\nWhere [your_pi_ip] is the IP address of your Pi.\n\n\nTo stop the homecage web server, in the command prompt use keyboard \nctrl+c\n\n\nViewing saved videos\n\n\nClick the hard-drive icon to view saved video files.\n\n\nSetting options\n\n\nIn the web interface\n\n\nExpand the \noptions\n tab to set parameters of homecage. Use \nsave options\n to permanaently save the options. Load the default options again with 'Load Default Options'.\n\n\n\n\nVideos are saved in the .h264 format and need to be converted to .mp4 which can be slow. Turn off 'Convert video from h264 to mp4' and convert manually at the end of an experiment.\n\n\nOn the Pi\n\n\nMost of the options can be changed and saved using the web interface. The  options can also be configured manually by editing the \nhomecage/homecage_app/config.json\n file.\n\n\ncd ~/homecage/homecage_app\npico config.json\n\n\n\nIf you edit the config.json file it needs the correct sytax. Without the correct syntax \npython homecage_app.py\n \nwill\n fail. Check the syntax with the following command. It will output the json if correct and an error otherwise.\n\n\ncat config.json | python -m json.tool\n\n\n\nThe default \nconfig.json\n file is:\n\n\n{\n    \"hardware\": {\n        \"whiteLightPin\": 2, \n        \"irLightPin\": 3, \n        \"readtemperature\": true, \n        \"temperatureInterval\": 20, \n        \"temperatureSensor\": 4\n    }, \n    \"lights\": {\n        \"auto\": false, \n        \"sunset\": 18, \n        \"sunrise\": 6\n    }, \n    \"video\": {\n        \"fileDuration\": 5, \n        \"converttomp4\": true, \n        \"captureStill\": true, \n        \"savepath\": \"/home/pi/video\", \n        \"fps\": 30, \n        \"stillInterval\": 2, \n        \"resolution\": \"1024,768\"\n    }, \n    \"stream\": {\n        \"resolution\": \"640,480\"\n    }, \n    \"scope\": {\n        \"autoArm\": false, \n        \"bufferSeconds\": 5, \n        \"frameIn\": {\n            \"enabled\": true, \n            \"pin\": 18, \n            \"polarity\": \"rising\"\n        }, \n        \"triggerIn\": {\n            \"enabled\": true, \n            \"pin\": 20, \n            \"polarity\": \"rising\"\n        }, \n        \"triggerOut\": {\n            \"enabled\": true, \n            \"pin\": 31, \n            \"polarity\": \"rising\"\n        }\n    }\n}",
            "title": "Web interface"
        },
        {
            "location": "/web-interface/#running-the-web-server",
            "text": "Login to the Pi  ssh pi@[your_pi_ip]  Where [your_pi_ip] is the IP address of your Pi.  At a command prompt, type:  cd\ncd homecage/homecage_app\npython homecage_app.py  Once  homecage_app.py  is running you can access the web server in a browser with the address:  http:[your_pi_ip]:5000  Where [your_pi_ip] is the IP address of your Pi.  To stop the homecage web server, in the command prompt use keyboard  ctrl+c",
            "title": "Running the web server"
        },
        {
            "location": "/web-interface/#viewing-saved-videos",
            "text": "Click the hard-drive icon to view saved video files.",
            "title": "Viewing saved videos"
        },
        {
            "location": "/web-interface/#setting-options",
            "text": "",
            "title": "Setting options"
        },
        {
            "location": "/web-interface/#in-the-web-interface",
            "text": "Expand the  options  tab to set parameters of homecage. Use  save options  to permanaently save the options. Load the default options again with 'Load Default Options'.   Videos are saved in the .h264 format and need to be converted to .mp4 which can be slow. Turn off 'Convert video from h264 to mp4' and convert manually at the end of an experiment.",
            "title": "In the web interface"
        },
        {
            "location": "/web-interface/#on-the-pi",
            "text": "Most of the options can be changed and saved using the web interface. The  options can also be configured manually by editing the  homecage/homecage_app/config.json  file.  cd ~/homecage/homecage_app\npico config.json  If you edit the config.json file it needs the correct sytax. Without the correct syntax  python homecage_app.py   will  fail. Check the syntax with the following command. It will output the json if correct and an error otherwise.  cat config.json | python -m json.tool  The default  config.json  file is:  {\n    \"hardware\": {\n        \"whiteLightPin\": 2, \n        \"irLightPin\": 3, \n        \"readtemperature\": true, \n        \"temperatureInterval\": 20, \n        \"temperatureSensor\": 4\n    }, \n    \"lights\": {\n        \"auto\": false, \n        \"sunset\": 18, \n        \"sunrise\": 6\n    }, \n    \"video\": {\n        \"fileDuration\": 5, \n        \"converttomp4\": true, \n        \"captureStill\": true, \n        \"savepath\": \"/home/pi/video\", \n        \"fps\": 30, \n        \"stillInterval\": 2, \n        \"resolution\": \"1024,768\"\n    }, \n    \"stream\": {\n        \"resolution\": \"640,480\"\n    }, \n    \"scope\": {\n        \"autoArm\": false, \n        \"bufferSeconds\": 5, \n        \"frameIn\": {\n            \"enabled\": true, \n            \"pin\": 18, \n            \"polarity\": \"rising\"\n        }, \n        \"triggerIn\": {\n            \"enabled\": true, \n            \"pin\": 20, \n            \"polarity\": \"rising\"\n        }, \n        \"triggerOut\": {\n            \"enabled\": true, \n            \"pin\": 31, \n            \"polarity\": \"rising\"\n        }\n    }\n}",
            "title": "On the Pi"
        },
        {
            "location": "/rest-interface/",
            "text": "Once the homecage server is running, it will respond to the following \nREST\n end points. Simply put, the REST interface allows you to control a Raspberry Pi camera from a web-browser.\n\n\nWith this, it is relatively simple to write your own code to control a Raspberry Pi running the homecage server. You could do this from Python, Javascript, Matlab, or Igor. For example, we (and now you) are using this interface for both the \nweb\n and \nvideo wall\n interfaces.\n\n\nYou can try this out by entering the following web addresses into your browser:\n\n\nhttp://[your_pi_ip]:5000/status\n\n\n\nAnd you should get something like this:\n\n\n{\n  \"environment\": {\n    \"humidity\": 1.0,\n    \"temperature\": 28.29\n  },\n  \"lights\": {\n    \"irLED\": false,\n    \"whiteLED\": false\n  },\n  \"server\": {\n    \"lastResponse\": \"\",\n    \"state\": \"idle\"\n  },\n  \"system\": {\n    \"cpuTemperature\": \"48.3\",\n    \"date\": \"2018-05-21\",\n    \"gbRemaining\": \"7.70\",\n    \"gbSize\": \"14.48\",\n    \"hostname\": \"pi3\",\n    \"ip\": \"192.168.1.3\",\n    \"time\": \"13:24:23\"\n  },\n  \"trial\": {\n    \"startTimeSeconds\": null,\n    \"timeRemaining\": null\n  }\n}\n\n\n\n\nServer Status:\n\n\nGet runtime status of server\n\n\n/status\n\n\n\nGet user configured options\n\n\n/config\n\n\n\nRecord\n\n\nStart and stop video recording\n\n\n/record/1 \n/record/0\n\n\n\nStream\n\n\nStart and stop video streaming\n\n\n/stream/1 \n/stream/0\n\n\n\nLights\n\n\nTurn lights on and off\n\n\n/irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0\n\n\n\nImages\n\n\n/lastimage\n\n\n\nSet user options\n\n\n/set/fps/<int:value> \n/set/fileDuration/<int:value>\n\n\n\nSimulate a scope\n\n\n/simulate/triggerin\n/simulate/frame\n/simulate/stop",
            "title": "REST interface"
        },
        {
            "location": "/rest-interface/#server-status",
            "text": "Get runtime status of server  /status  Get user configured options  /config",
            "title": "Server Status:"
        },
        {
            "location": "/rest-interface/#record",
            "text": "Start and stop video recording  /record/1 \n/record/0",
            "title": "Record"
        },
        {
            "location": "/rest-interface/#stream",
            "text": "Start and stop video streaming  /stream/1 \n/stream/0",
            "title": "Stream"
        },
        {
            "location": "/rest-interface/#lights",
            "text": "Turn lights on and off  /irLED/1 \n/irLED/0 \n/whiteLED/1 \n/whiteLED/0",
            "title": "Lights"
        },
        {
            "location": "/rest-interface/#images",
            "text": "/lastimage",
            "title": "Images"
        },
        {
            "location": "/rest-interface/#set-user-options",
            "text": "/set/fps/<int:value> \n/set/fileDuration/<int:value>",
            "title": "Set user options"
        },
        {
            "location": "/rest-interface/#simulate-a-scope",
            "text": "/simulate/triggerin\n/simulate/frame\n/simulate/stop",
            "title": "Simulate a scope"
        },
        {
            "location": "/command-line/",
            "text": "To be esoteric, we have implemented a pure command line interface to contorl a Raspberry Pi camera. If you want to be obscure then please use this, otherwise just use the \nweb\n interface.\n\n\n1) Log in to the Pi\n\n\nOn a Mac, use the terminal application in /Applications/Utilities/terminal.app\n\n\nOn Windows, use Putty\n\n\nssh pi@[your_ip]\n\n# Enter password when prompted\n\n\n\n\n2) Change into the homecage directory\n\n\nAt the command prompt, type\n\n\ncd\ncd homecage/cli\n\n\n\n3) Get command help\n\n\nThe commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.\n\n\nTo get help, at the command prompt, type \n\n\n./help\n\n\n\nThis returns\n\n\n Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage\n\n\n\n4) Position the cages within a good field-of-view\n\n\nStart a video stream and then view the stream in a web browser.\n\n\nstream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream\n\n\n\nIn any browser, go to the address \nhttp://10.16.80.162:8080/stream\n\n\nWhile positioning cages, turn the white and or IR LEDs on and off\n\n\n# Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off\n\n\n\nWhen your happy with position, stop the video stream\n\n\nstream stop\n\n\n\n5) Start continuous video recording\n\n\nrecord start\n\n\n\nThis will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.\n\n\n6) Mount the file server to get your video files\n\n\nOn a Mac, use \nFinder -> Go -> Connect To Server...\n and log in as follows\n\n\nafp://10.16.80.162\nusername: pi\npassword: [your_password]\n\n\n\nOn windows\n\n\nsmb:\\\\10.16.80.162\n\n\n\nFiles are saved in the \n/video/\n folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.\n\n\n7) Log out of the Pi\n\n\nexit",
            "title": "Command line interface"
        },
        {
            "location": "/command-line/#1-log-in-to-the-pi",
            "text": "On a Mac, use the terminal application in /Applications/Utilities/terminal.app  On Windows, use Putty  ssh pi@[your_ip]\n\n# Enter password when prompted",
            "title": "1) Log in to the Pi"
        },
        {
            "location": "/command-line/#2-change-into-the-homecage-directory",
            "text": "At the command prompt, type  cd\ncd homecage/cli",
            "title": "2) Change into the homecage directory"
        },
        {
            "location": "/command-line/#3-get-command-help",
            "text": "The commands allow you to start and stop a video stream and video recording. They can also be used to turn the white and IR lights on and off.  To get help, at the command prompt, type   ./help  This returns   Status\n    status - check the status\n Video Recording\n    record start\n    record stop\n Video Streaming\n    stream start\n    stream stop\n IR Light\n    light ir on\n    light ir off\n White Light\n    light white on\n    light white off\n Online Manual\n    http://blog.cudmore.io/homecage",
            "title": "3) Get command help"
        },
        {
            "location": "/command-line/#4-position-the-cages-within-a-good-field-of-view",
            "text": "Start a video stream and then view the stream in a web browser.  stream start\n\n# Returns\nView the stream at:\n   http://10.16.80.162:8080/stream  In any browser, go to the address  http://10.16.80.162:8080/stream  While positioning cages, turn the white and or IR LEDs on and off  # Turn the white lights on\nlight white on\n\n# Turn the white lights off\nlight white off  When your happy with position, stop the video stream  stream stop",
            "title": "4) Position the cages within a good field-of-view"
        },
        {
            "location": "/command-line/#5-start-continuous-video-recording",
            "text": "record start  This will save recorded video into individual files, 5 minutes of video per file. This will also control the light cycle, at night (6 PM - 6 AM) the white light is off and the IR light is on. During the day (6 AM - 6 PM), the white light is on and the IR light is off. Both the duration of each video file at the timing of the light cycle can easily be changed.",
            "title": "5) Start continuous video recording"
        },
        {
            "location": "/command-line/#6-mount-the-file-server-to-get-your-video-files",
            "text": "On a Mac, use  Finder -> Go -> Connect To Server...  and log in as follows  afp://10.16.80.162\nusername: pi\npassword: [your_password]  On windows  smb:\\\\10.16.80.162  Files are saved in the  /video/  folder. Video files have the .h264 extension. There are also text files (extension .txt) saved, these have a log of temperature and humidity as well as the time the lights were turned on and off.",
            "title": "6) Mount the file server to get your video files"
        },
        {
            "location": "/command-line/#7-log-out-of-the-pi",
            "text": "exit",
            "title": "7) Log out of the Pi"
        },
        {
            "location": "/videowall/",
            "text": "Videowall is Javascript code and a python web-server to view and control multiple copies of homecage on different Raspberry Pi's! In theory, this allows you to control any number of Raspberry Pi's with their own cameras.\n\n\nInstall\n\n\nSee the main homecage \ninstall\n page.\n\n\nServe\n\n\nOnce homecage is \ninstalled\n.\n\n\ncd ~/homecage/videowall_app/\npython videowall_app.py\n\n\n\nBrowse\n\n\nhttp://[your_pi_ip]:8000\n\n\n\nExample\n\n\nThis example shows controlling three Raspberry Pi computers, each running homecage. Any number of Raspberry Pi camera systems can be added with the 'Add Server' button. The videowall allows each Pi to be independently controlled.",
            "title": "Video wall"
        },
        {
            "location": "/videowall/#install",
            "text": "See the main homecage  install  page.",
            "title": "Install"
        },
        {
            "location": "/videowall/#serve",
            "text": "Once homecage is  installed .  cd ~/homecage/videowall_app/\npython videowall_app.py",
            "title": "Serve"
        },
        {
            "location": "/videowall/#browse",
            "text": "http://[your_pi_ip]:8000",
            "title": "Browse"
        },
        {
            "location": "/videowall/#example",
            "text": "This example shows controlling three Raspberry Pi computers, each running homecage. Any number of Raspberry Pi camera systems can be added with the 'Add Server' button. The videowall allows each Pi to be independently controlled.",
            "title": "Example"
        },
        {
            "location": "/wiring-the-system/",
            "text": "Camera\n\n\nIt is worth while checking out the \nspecs\n as they are impressive.\n\n\nAttach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end. The blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens). In the picture below, you can't see the blue side of the ribbon as it is toward the ethenret port and towards the back of the camera.\n\n\n\n\nRaspberry Pi B+/2/3 pinout\n\n\n\n\nThe image above is a schematic of the layout of the pins on the Raspberry Pi. Each of the yellow numbered pins are digital input/output (DIO) pins. Your free to attach each component to the pin numbers of your choice. Just be sure that the pin numbers specified in the \nconfig.json\n file match the way you wired the system.\n\n\nHere are all the connections you want to make to set up the homecage system\n\n\n\n\n\n\n\n\nPin from Raspberry\n\n\nTo\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n8\n\n\nIn1 on relay\n\n\nWhite LED\n\n\n\n\n\n\n7\n\n\nIn2 on relay\n\n\nIR LED\n\n\n\n\n\n\n5 V\n\n\nVcc on relay\n\n\nPower 5V end of relay switch\n\n\n\n\n\n\nGround\n\n\nGND Relay\n\n\nPower 5V end of relay switch\n\n\n\n\n\n\n9\n\n\nDATA pin on DHT sensor\n\n\nRead temperature/humidity from DHT sensor\n\n\n\n\n\n\n5 V\n\n\nVCC pin on DHT sensor\n\n\nPower DHT sensor\n\n\n\n\n\n\nGround\n\n\nGND pin on DHT sensor\n\n\nPower DHT sensor\n\n\n\n\n\n\n\n\n5V and ground pins\n\n\nThere are multiple power and ground pins, use these to connect to the relay switch, the temperature sensor, and the light sensor. Conceptually, all the ground pins are the same, you can use a \nbread-board\n if you run out of ground pins.\n\n\nLights\n\n\nUse an external 12V AC/DC power supply.\n - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have anough current. A 1 Amp 12V adapter should be fine, don't worry, if it is under-powered your lights will be a little dim.\n\n\nUse a relay switch.\n - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, \nDO NOT\n work with AC power coming from the wall as it can kill you.\n\n\nThe relay switch effectively separates the 5V, Ground, and DIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. \n\n\nAll LEDs need resistors.\n - All LEDs need resistors. If your directly connect an LED to power and ground without a resistor you will burn the LED. All LEDs need a resistor wired in parallel, these are called 'current limiting resistor'.\n\n\nUse IR LEDs <900 nm.\n - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.\n\n\n\n\nConnect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch.\n\n\nAll LEDs need resistors!\n\n\n\n\n\n\nUsing a 12V AC/DC adapter (1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (not negative) voltage when attached to the positive (normally red) end of the multi-meter.\n\n\n\n\n\n\nCut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.\n\n\n\n\n\n\nStick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter.\n\n\n\n\n\n\nDo the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter.\n\n\n\n\n\n\nOne important concept is that 'all grounds are the same'. This includes the ground on the 12V AC/DC adapter, the ground of the LEDs, the ground of theRaspberry Pi, etc.\n\n\nConnect the Pi to the relay switch switch\n\n\nConnect 4 wires from the Pi to the relay switch.\n\n\n\n\n\n\nConnect a DIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.\n\n\n\n\n\n\nConnect a second DIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.\n\n\n\n\n\n\nConnect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.\n\n\n\n\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the relay switch.\n\n\n\n\n\n\nDHT 22 temperature sensor\n\n\nThis is powered by the Raspberry Pi. Connect 3 wires from the Pi to the sensor.\n\n\n\n\n\n\nConnect a 5V pin from the pi to the 'VCC' pin on the sensor.\n\n\n\n\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the sensor.\n\n\n\n\n\n\nConnect a DIO pin from the Pi to the 'DATA' pin on the sensor.\n\n\n\n\n\n\n\n\nCombined visible and IR light sensor\n\n\nThis is powered by the Raspberry Pi. One example is a \nSI1145 Digital UV Index / IR / Visible Light Sensor\n. Your on your own to wire this.",
            "title": "Wiring the system"
        },
        {
            "location": "/wiring-the-system/#camera",
            "text": "It is worth while checking out the  specs  as they are impressive.  Attach the camera to the Pi with a flat ribbon cable. The cable should have blue tabs on one side of each end. The blue tab goes towards the ethernet port on the Pi and towards the back of the camera (away from the lens). In the picture below, you can't see the blue side of the ribbon as it is toward the ethenret port and towards the back of the camera.",
            "title": "Camera"
        },
        {
            "location": "/wiring-the-system/#raspberry-pi-b23-pinout",
            "text": "The image above is a schematic of the layout of the pins on the Raspberry Pi. Each of the yellow numbered pins are digital input/output (DIO) pins. Your free to attach each component to the pin numbers of your choice. Just be sure that the pin numbers specified in the  config.json  file match the way you wired the system.  Here are all the connections you want to make to set up the homecage system     Pin from Raspberry  To  Purpose      8  In1 on relay  White LED    7  In2 on relay  IR LED    5 V  Vcc on relay  Power 5V end of relay switch    Ground  GND Relay  Power 5V end of relay switch    9  DATA pin on DHT sensor  Read temperature/humidity from DHT sensor    5 V  VCC pin on DHT sensor  Power DHT sensor    Ground  GND pin on DHT sensor  Power DHT sensor",
            "title": "Raspberry Pi B+/2/3 pinout"
        },
        {
            "location": "/wiring-the-system/#5v-and-ground-pins",
            "text": "There are multiple power and ground pins, use these to connect to the relay switch, the temperature sensor, and the light sensor. Conceptually, all the ground pins are the same, you can use a  bread-board  if you run out of ground pins.",
            "title": "5V and ground pins"
        },
        {
            "location": "/wiring-the-system/#lights",
            "text": "Use an external 12V AC/DC power supply.  - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have anough current. A 1 Amp 12V adapter should be fine, don't worry, if it is under-powered your lights will be a little dim.  Use a relay switch.  - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter,  DO NOT  work with AC power coming from the wall as it can kill you.  The relay switch effectively separates the 5V, Ground, and DIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch.   All LEDs need resistors.  - All LEDs need resistors. If your directly connect an LED to power and ground without a resistor you will burn the LED. All LEDs need a resistor wired in parallel, these are called 'current limiting resistor'.  Use IR LEDs <900 nm.  - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.",
            "title": "Lights"
        },
        {
            "location": "/wiring-the-system/#connect-a-12v-acdc-adapter-ir-and-white-lights-to-the-two-channel-relay-switch",
            "text": "All LEDs need resistors!    Using a 12V AC/DC adapter (1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (not negative) voltage when attached to the positive (normally red) end of the multi-meter.    Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.    Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter.    Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter.    One important concept is that 'all grounds are the same'. This includes the ground on the 12V AC/DC adapter, the ground of the LEDs, the ground of theRaspberry Pi, etc.",
            "title": "Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch."
        },
        {
            "location": "/wiring-the-system/#connect-the-pi-to-the-relay-switch-switch",
            "text": "Connect 4 wires from the Pi to the relay switch.    Connect a DIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.    Connect a second DIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.    Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.    Connect a ground pin from the Pi to the 'GND' pin on the relay switch.",
            "title": "Connect the Pi to the relay switch switch"
        },
        {
            "location": "/wiring-the-system/#dht-22-temperature-sensor",
            "text": "This is powered by the Raspberry Pi. Connect 3 wires from the Pi to the sensor.    Connect a 5V pin from the pi to the 'VCC' pin on the sensor.    Connect a ground pin from the Pi to the 'GND' pin on the sensor.    Connect a DIO pin from the Pi to the 'DATA' pin on the sensor.",
            "title": "DHT 22 temperature sensor"
        },
        {
            "location": "/wiring-the-system/#combined-visible-and-ir-light-sensor",
            "text": "This is powered by the Raspberry Pi. One example is a  SI1145 Digital UV Index / IR / Visible Light Sensor . Your on your own to wire this.",
            "title": "Combined visible and IR light sensor"
        },
        {
            "location": "/parts-list/",
            "text": "Build a box to hold cages, lights, and camera\n\n\nStrap the computer to the side, place on top or put inside the box. If placing inside the box, make sure to make an inner box to block LEDs on computer.\n\n\nTotal cost of each system is about $130, why not build 10!\n\n\n\n\nComputer\n\n\n\n\nRaspberry Pi 3 B+\n\n\n5V AC/DC power, 2.5A\n\n\nSD card, class 10, 32 GB (for system installation, 16 GB is fine, class 10 is important)\n\n\nCase\n\n\n\n\n\n\nUSB key, 64 GB (to save video)\n\n\nEthernet cable\n\n\n\n\nCamera\n\n\n\n\nRaspberry Pi NoIR, 8 MP, Version 2\n.\n\n\nCamera cable\n\n\n\n\nLights\n\n\n\n\n12V AC/DC adapter, 1 Amp\n\n\n2-channel relay\n (to switch lights on/off)\n\n\n850 nm IR LEDs\n. Don't use IR LEDs >900nm as the camera is not very sensitive in this range and images will be grainy.\n\n\nWhite LEDs\n\n\nResistors\n to go inline with all LEDs. All LEDs need resistors!\n\n\n\n\nEnvironmental\n\n\n\n\nDHT 22 temperature and humidity sensor\n\n\nSI1145 Digital UV Index / IR / Visible Light Sensor",
            "title": "Parts list"
        },
        {
            "location": "/parts-list/#computer",
            "text": "Raspberry Pi 3 B+  5V AC/DC power, 2.5A  SD card, class 10, 32 GB (for system installation, 16 GB is fine, class 10 is important)  Case    USB key, 64 GB (to save video)  Ethernet cable",
            "title": "Computer"
        },
        {
            "location": "/parts-list/#camera",
            "text": "Raspberry Pi NoIR, 8 MP, Version 2 .  Camera cable",
            "title": "Camera"
        },
        {
            "location": "/parts-list/#lights",
            "text": "12V AC/DC adapter, 1 Amp  2-channel relay  (to switch lights on/off)  850 nm IR LEDs . Don't use IR LEDs >900nm as the camera is not very sensitive in this range and images will be grainy.  White LEDs  Resistors  to go inline with all LEDs. All LEDs need resistors!",
            "title": "Lights"
        },
        {
            "location": "/parts-list/#environmental",
            "text": "DHT 22 temperature and humidity sensor  SI1145 Digital UV Index / IR / Visible Light Sensor",
            "title": "Environmental"
        },
        {
            "location": "/troubleshooting/",
            "text": "Video recording\n\n\nManually capture a single image using the built in \nraspistill\n command. This will take an image and save it to \ntest.jpg\n.\n\n\nraspistill -o test.jpg\n\n\n\n\nVideo streaming\n\n\nCheck version of uv4l\n\n\n# type\nuv4l -i\n\n# returns\nUserspace Video4Linux\nCopyright (C) Luca Risolia <luca.risolia@linux-projects.org>\nVersion 1.9.16 built on Jan 28 2018\n\n\n\nRun uv4l by hand\n\n\nuv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\n\n\n\n\nBrowse the live stream at\n\n\nhttp://[your_ip]:8080\n\n\n\n\nManually stop uv4l (make sure all browser windows are closed)\n\n\nsudo pkill uv4l\n\n\n\n\nProblems with pip\n\n\nSometimes pip version 10 seems to be broken. Uninstall and then install pip version 9\n\n\n# uninstall pip\npython -m pip uninstall pip\n\n# install pip 9\npython -m pip install -U \"pip<10\"\n\n\n\nProblems with virtualenv\n\n\nIf virtualenv is not available (16.0.0)\n\n\nsudo /usr/bin/easy_install virtualenv\n\n\n\nManually configuring config.json\n\n\nIf you edit the config.json file it needs the correct sytax. Check the syntax with the following command. It will output the json if correct and an error otherwise.\n\n\ncat config.json | python -m json.tool\n\n\n\nsocket.error: [Errno 98] Address already in use\n\n\nSometimes you will get an error when you run \npython homecage_app.py\n. This means there is already a prcoess using the web socket, usually :5000\n\n\nUse \nps -aux | grep homecage_app\n to find the process and kill it\n\n\n# type this\nps -aux | grep homecage_app\n\n# will yield something like this\npi       12445  0.1  2.2  41572 20204 pts/2    Sl   17:14   0:04 python homecage_app.py\npi       12553  2.3  2.3  51032 20328 pts/2    Sl   17:50   0:08 /usr/bin/python homecage_app.py\npi       12606  0.0  0.3   6080  3036 pts/2    S+   17:57   0:00 grep --color=auto homecage_app\n\n#Using those 5 digit numbers, kill all homecage_app processes\nkill -9 12553\nkill -9 12445\n\n\n\n\nConverting h264 to mp4\n\n\nWe use \navconv\n to convert h264 to mp4.\n\n\nCheck the version of avconv\n\n\n# type\navconv -version\n\n# returns\nffmpeg version 3.2.10-1~deb9u1+rpt1 Copyright (c) 2000-2018 the FFmpeg developers\nbuilt with gcc 6.3.0 (Raspbian 6.3.0-18+rpi1) 20170516\nlibavutil      55. 34.101 / 55. 34.101\nlibavcodec     57. 64.101 / 57. 64.101\nlibavformat    57. 56.101 / 57. 56.101\nlibavdevice    57.  1.100 / 57.  1.100\nlibavfilter     6. 65.100 /  6. 65.100\nlibavresample   3.  1.  0 /  3.  1.  0\nlibswscale      4.  2.100 /  4.  2.100\nlibswresample   2.  3.100 /  2.  3.100\nlibpostproc    54.  1.100 / 54.  1.100\n\n\n\nManually converting h264 files to mp4\n\n\nThe Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.\n\n\nUsing avconv\n\n\nThis will convert all .h264 files in \na folder\n into .mp4 files with 15 fps.\n\n\n#!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\"${file%.*}\"\n   echo $filename\n   avconv -framerate $fps -i \"$file\" -r -vcodec copy \"$file.mp4\"\n   sleep 3\ndone\n\n\n\n\nUsing ffmpeg\n\n\nThis will convert all .h264 files in \na folder\n into .mp4 files with 15 fps.\n\n\n#!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\"${file%.*}\"\n   echo $filename\n   ffmpeg -r $fps -i \"$file\" -vcodec copy \"$file.mp4\"\n   sleep 3\ndone\n\n\n\n\nThis will recursively convert all .h264 files in a folder and \nall of its subfolders\n into .mp4 files.\n\n\n#!/bin/bash\nfps=15\nIFS=$'\\n'\nfor file in $(find . -iname '*.h264') ; do\n    #printf '%s\\n' \"$file\"\n    ffmpeg -r $fps -i \"$file\" -vcodec copy \"$file.mp4\"\ndone\n\n\n\n\nFor more info on avconv and ffmpeg, see \nthis blog post\n.\n\n\nProblems with pip\n\n\nSometimes pip version 10 seems to be broken. Uninstall and then install pip version 9\n\n\n# uninstall pip\npython -m pip uninstall pip\n\n# install pip 9\npython -m pip install -U \"pip<10\"\n\n\n\nProblems with virtualenv\n\n\nIf virtualenv is not available (16.0.0)\n\n\nsudo /usr/bin/easy_install virtualenv\n\n\n\nEditing the config.json file manually\n\n\nIf you edit the config.json file it needs the correct sytax. Check the syntax with the following command. It will output the json if correct and an error otherwise.\n\n\ncat config.json | python -m json.tool",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#video-recording",
            "text": "Manually capture a single image using the built in  raspistill  command. This will take an image and save it to  test.jpg .  raspistill -o test.jpg",
            "title": "Video recording"
        },
        {
            "location": "/troubleshooting/#video-streaming",
            "text": "Check version of uv4l  # type\nuv4l -i\n\n# returns\nUserspace Video4Linux\nCopyright (C) Luca Risolia <luca.risolia@linux-projects.org>\nVersion 1.9.16 built on Jan 28 2018  Run uv4l by hand  uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on  Browse the live stream at  http://[your_ip]:8080  Manually stop uv4l (make sure all browser windows are closed)  sudo pkill uv4l",
            "title": "Video streaming"
        },
        {
            "location": "/troubleshooting/#problems-with-pip",
            "text": "Sometimes pip version 10 seems to be broken. Uninstall and then install pip version 9  # uninstall pip\npython -m pip uninstall pip\n\n# install pip 9\npython -m pip install -U \"pip<10\"",
            "title": "Problems with pip"
        },
        {
            "location": "/troubleshooting/#problems-with-virtualenv",
            "text": "If virtualenv is not available (16.0.0)  sudo /usr/bin/easy_install virtualenv",
            "title": "Problems with virtualenv"
        },
        {
            "location": "/troubleshooting/#manually-configuring-configjson",
            "text": "If you edit the config.json file it needs the correct sytax. Check the syntax with the following command. It will output the json if correct and an error otherwise.  cat config.json | python -m json.tool",
            "title": "Manually configuring config.json"
        },
        {
            "location": "/troubleshooting/#socketerror-errno-98-address-already-in-use",
            "text": "Sometimes you will get an error when you run  python homecage_app.py . This means there is already a prcoess using the web socket, usually :5000  Use  ps -aux | grep homecage_app  to find the process and kill it  # type this\nps -aux | grep homecage_app\n\n# will yield something like this\npi       12445  0.1  2.2  41572 20204 pts/2    Sl   17:14   0:04 python homecage_app.py\npi       12553  2.3  2.3  51032 20328 pts/2    Sl   17:50   0:08 /usr/bin/python homecage_app.py\npi       12606  0.0  0.3   6080  3036 pts/2    S+   17:57   0:00 grep --color=auto homecage_app\n\n#Using those 5 digit numbers, kill all homecage_app processes\nkill -9 12553\nkill -9 12445",
            "title": "socket.error: [Errno 98] Address already in use"
        },
        {
            "location": "/troubleshooting/#converting-h264-to-mp4",
            "text": "We use  avconv  to convert h264 to mp4.  Check the version of avconv  # type\navconv -version\n\n# returns\nffmpeg version 3.2.10-1~deb9u1+rpt1 Copyright (c) 2000-2018 the FFmpeg developers\nbuilt with gcc 6.3.0 (Raspbian 6.3.0-18+rpi1) 20170516\nlibavutil      55. 34.101 / 55. 34.101\nlibavcodec     57. 64.101 / 57. 64.101\nlibavformat    57. 56.101 / 57. 56.101\nlibavdevice    57.  1.100 / 57.  1.100\nlibavfilter     6. 65.100 /  6. 65.100\nlibavresample   3.  1.  0 /  3.  1.  0\nlibswscale      4.  2.100 /  4.  2.100\nlibswresample   2.  3.100 /  2.  3.100\nlibpostproc    54.  1.100 / 54.  1.100",
            "title": "Converting h264 to mp4"
        },
        {
            "location": "/troubleshooting/#manually-converting-h264-files-to-mp4",
            "text": "The Raspberry camera saves .h264 video files. This format is very efficient and creates small files (10 MB per 5 minutes) but does require conversion to mp4 to impose a time.",
            "title": "Manually converting h264 files to mp4"
        },
        {
            "location": "/troubleshooting/#using-avconv",
            "text": "This will convert all .h264 files in  a folder  into .mp4 files with 15 fps.  #!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\"${file%.*}\"\n   echo $filename\n   avconv -framerate $fps -i \"$file\" -r -vcodec copy \"$file.mp4\"\n   sleep 3\ndone",
            "title": "Using avconv"
        },
        {
            "location": "/troubleshooting/#using-ffmpeg",
            "text": "This will convert all .h264 files in  a folder  into .mp4 files with 15 fps.  #!/bin/bash\nfps=15\nfor file in *.h264 ; do\n   filename=\"${file%.*}\"\n   echo $filename\n   ffmpeg -r $fps -i \"$file\" -vcodec copy \"$file.mp4\"\n   sleep 3\ndone  This will recursively convert all .h264 files in a folder and  all of its subfolders  into .mp4 files.  #!/bin/bash\nfps=15\nIFS=$'\\n'\nfor file in $(find . -iname '*.h264') ; do\n    #printf '%s\\n' \"$file\"\n    ffmpeg -r $fps -i \"$file\" -vcodec copy \"$file.mp4\"\ndone  For more info on avconv and ffmpeg, see  this blog post .",
            "title": "Using ffmpeg"
        },
        {
            "location": "/troubleshooting/#problems-with-pip_1",
            "text": "Sometimes pip version 10 seems to be broken. Uninstall and then install pip version 9  # uninstall pip\npython -m pip uninstall pip\n\n# install pip 9\npython -m pip install -U \"pip<10\"",
            "title": "Problems with pip"
        },
        {
            "location": "/troubleshooting/#problems-with-virtualenv_1",
            "text": "If virtualenv is not available (16.0.0)  sudo /usr/bin/easy_install virtualenv",
            "title": "Problems with virtualenv"
        },
        {
            "location": "/troubleshooting/#editing-the-configjson-file-manually",
            "text": "If you edit the config.json file it needs the correct sytax. Check the syntax with the following command. It will output the json if correct and an error otherwise.  cat config.json | python -m json.tool",
            "title": "Editing the config.json file manually"
        },
        {
            "location": "/images/",
            "text": "These are images of the homecage at various developmental stages\n\n\nv0.0\n\n\nOverview\n\n\n\n\n\n\nLights and camera\n\n\n\n\n\n\nRats nest",
            "title": "Images"
        },
        {
            "location": "/images/#v00",
            "text": "",
            "title": "v0.0"
        },
        {
            "location": "/images/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/images/#lights-and-camera",
            "text": "",
            "title": "Lights and camera"
        },
        {
            "location": "/images/#rats-nest",
            "text": "",
            "title": "Rats nest"
        },
        {
            "location": "/implementation-details/",
            "text": "Once running, the homecage system should be simple to use. Yet, for this simple system to work, a number of independent components must each work and must communicate with each other. As is often the case, the implementation details to create a simple system is complex. Two cliches to describe this is 'you can't fly with half a wing' and 'the devil is in the details'.\n\n\nWe have about 15 components in use! Each component is developed independently and all are open source. It is amazing that this system works? What follows is a description of the different pieces of the homecage system with links to the source code and the components that are used.\n\n\nRaspberry Pi system\n\n\nDon't forget the Raspberry Pi! It is open-source hardware made by the \nRaspberry Pi Foundation\n. It is running a variant of the \nDebian\n operating system called \nRaspbian\n.\n\n\nDocumentation\n\n\nThis website is written in \nmarkdown\n. The markdown and a description of the contents using \nyaml\n are brought together, compiled, and a static site is generated by \nmkdocs\n. The final layout is controlled by an mkdocs theme called \nmaterial\n.\n\n\nFront end\n\n\n\n\n\n\nindex.html\n - Main web interface written in \nhtml\n, uses \nJavascript\n and the Javascript \nAngular\n library to provide dynamic and real-time content.\n\n\n\n\n\n\nvideolist.html\n - Again, an html web page but this time using \nJinja\n as a template engine. Jinja is default template engine used by Flask.\n\n\n\n\n\n\nhello.js\n - \nJavascript\n code that implementes the logic of the web interface. Has functions that get called when user is clicking. Also has function to talk to \nhomecage_app.py\n web server via a \nREST\n interface. This is not standard Javascript but is using the \nAngular\n library.\n\n\n\n\n\n\nhello.css\n - A \nCascading Style Sheet (css)\n text file that describes the precise layout of the web pages.\n\n\n\n\n\n\nBack end\n\n\n\n\n\n\nhome.py\n - The \npython\n back-end that runs everything. This includes controlling DIO pins to turn lights on/off, running \nbash\n scripts to start/stop the video and to convert .h264 video files to .mp4. This code provides a clearly defined application programming interface (API) to all these components such that the web server in \nhomecage_app.py\n has an easier job.\n\n\n\n\n\n\nhomecage_app.py\n - Python code that uses the \nFlask\n library to run the web-server and provide bi-directional control of the \nhome.py\n back-end. In one direction, it accepts web url requests and sends them to the backend, in the other direction, it accesses the back-end and send information back out to the web clients. This  primarily implements a \nREST\n interface so a client-side browser can get and set server values without explicitly logging in to the server.\n\n\n\n\n\n\nconfig.json\n - A text file written in \njson\n that provides human editable configuration options for the server.\n\n\n\n\n\n\nuv4l\n\n\n\n\nstream\n - \nBash shell\n script to start stop streaming with the \nuv4l\n library.\n\n\n\n\navconv\n\n\n\n\nconvert_video.sh\n - Bash shell script to convert a .h264 video file into .mp4. Uses avconv function which is part of \nlibav\n library.",
            "title": "Implementation details"
        },
        {
            "location": "/implementation-details/#raspberry-pi-system",
            "text": "Don't forget the Raspberry Pi! It is open-source hardware made by the  Raspberry Pi Foundation . It is running a variant of the  Debian  operating system called  Raspbian .",
            "title": "Raspberry Pi system"
        },
        {
            "location": "/implementation-details/#documentation",
            "text": "This website is written in  markdown . The markdown and a description of the contents using  yaml  are brought together, compiled, and a static site is generated by  mkdocs . The final layout is controlled by an mkdocs theme called  material .",
            "title": "Documentation"
        },
        {
            "location": "/implementation-details/#front-end",
            "text": "index.html  - Main web interface written in  html , uses  Javascript  and the Javascript  Angular  library to provide dynamic and real-time content.    videolist.html  - Again, an html web page but this time using  Jinja  as a template engine. Jinja is default template engine used by Flask.    hello.js  -  Javascript  code that implementes the logic of the web interface. Has functions that get called when user is clicking. Also has function to talk to  homecage_app.py  web server via a  REST  interface. This is not standard Javascript but is using the  Angular  library.    hello.css  - A  Cascading Style Sheet (css)  text file that describes the precise layout of the web pages.",
            "title": "Front end"
        },
        {
            "location": "/implementation-details/#back-end",
            "text": "home.py  - The  python  back-end that runs everything. This includes controlling DIO pins to turn lights on/off, running  bash  scripts to start/stop the video and to convert .h264 video files to .mp4. This code provides a clearly defined application programming interface (API) to all these components such that the web server in  homecage_app.py  has an easier job.    homecage_app.py  - Python code that uses the  Flask  library to run the web-server and provide bi-directional control of the  home.py  back-end. In one direction, it accepts web url requests and sends them to the backend, in the other direction, it accesses the back-end and send information back out to the web clients. This  primarily implements a  REST  interface so a client-side browser can get and set server values without explicitly logging in to the server.    config.json  - A text file written in  json  that provides human editable configuration options for the server.",
            "title": "Back end"
        },
        {
            "location": "/implementation-details/#uv4l",
            "text": "stream  -  Bash shell  script to start stop streaming with the  uv4l  library.",
            "title": "uv4l"
        },
        {
            "location": "/implementation-details/#avconv",
            "text": "convert_video.sh  - Bash shell script to convert a .h264 video file into .mp4. Uses avconv function which is part of  libav  library.",
            "title": "avconv"
        },
        {
            "location": "/dev-notes/",
            "text": "git\n\n\ngit dev branch\n\n\n# checkout a branch 'dev'\ngit checkout dev\n\n# see all branches\ngit branch\n\n# commit ('dev' is implicit)\ngit commit -a -m 'test'\n\n# CRITICAL, push to 'dev'\ngit push -u origin dev\n\n# merge (go into master and fast-forward merge dev)\ngit checkout master\ngit merge dev\n\n\n\ngit master branch\n\n\nSet up password\n\n\ngit config --global credential.helper 'cache --timeout=10000000'\n\n\n\nClone\n\n\ngit clone https://github.com/cudmore/homecage.git\n\n\n\nPull\n\n\ngit pull\n\n\n\nCommit all changes. Do this a second time to see untracked files\n\n\ngit commit -a -m 'test'\n\n\n\nAdd files\n\n\ngit add <filename>\n\n\n\nPush\n\n\ngit push -u origin master\n\n\n\nInstall in virtual env\n\n\nMake a clean virtual environment that does not depend on current installed packages\n\n\n# make a folder to hold your virtual environment\nmkdir env\n\n# make a python 2 environment\n#virtualenv -p python2 --no-site-packages env\n\n# make a python 3 environment\nvirtualenv -p python3 --no-site-packages env\n\n\n\nActivate the environment\n\n\nsource env/bin/activate\n\n\n\nCheck your python version\n\n\npython -V\n\n\n\nMake sure python command is running in the virtual environment\n\n\nwhich python\n\n\n\nInstall homecage_app dependencies\n\n\npip install -r requirements.txt\n\n\n\nRun homecage_app.py\n\n\npython homecage_app.py\n\n\n\nBrowse to the homecage_App website\n\n\nhttp://[yourip]:5000\n\n\n\nExit virtual environment\n\n\ndeactivate\n\n\n\nmkDocs\n\n\nWe use \nmkdocs\n to generate the documentation website from markdown files. On the Raspberry, mkdocs will only install into Python 3.x\n\n\nInstall\n\n\npip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material\n\n\n\nServe locally\n\n\ncd\ncd homecage/docs\nmkdocs serve\n\n# or if logged in to a remote pi, serve using the pi ip\nmkdocs serve -a 192.168.1.3:8000\n\n\n\nPush to github\n\n\ncd\ncd homecage/docs\nmkdocs gh-deploy --clean\n\n\n\nuv4l\n\n\nuv4l is what we use to stream live video.\n\n\n20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned \n<defunct>\n process that can't actually be kill(ed). This was mucking up any future interaciton as \nstream\n, \nrecord\n, and \nstatus\n thought there was still a uv4l process.\n\n\nSent this to uv4l people\n\n\nHi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a <defunct>\nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?\n\n\n\n\nAnswer was to kill child processes first. Get child processes of PID with `pstree -p PID'\n\n\nWhich eventually led to this\n\n\n# get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a `<defunct>` uv4l !\nsudo kill -- -PID\n\n\n\n\nRemove uv4l-raspicam-extras\n\n\nsudo apt-get remove uv4l-raspicam-extras\n\n\n\nnginx+uwsgi+flask\n\n\nFollow \nthis\n.\n\n\nand \nmy blog post\n\n\n\n\ninstall nginx and uwsgi\n\n\n\n\nsudo apt-get install nginx\nsudo pip install uwsgi\n\n\n\n\n\n\n\n\nstart and stop nginx\n\n\nsudo service nginx start\n\n\n\n\n\n\nchange group (not user) of folder\n\n\nsudo chown -R pi:www-data /home/pi/homecage/homecage_app\n\n\n\n\n\n\nnot sure if this is necessary but won't hurt and should not break\n\n\nsudo usermod -aG www-data pi\n\n\n\n\n\n\ncontents of homecage/homecage_app/uwsgi_config.ini\n\n\n\n\n\n\nBecause we are using GPIO callbacks, we can't have more than 1 process and 1 thread.\n\n\n[uwsgi]\n\nchdir = /home/pi/homecage/homecage_app\nmodule = homecage_app:app\n\nmaster = true\nprocesses = 1\nthreads = 1\n\n#uid = www-data \n#gid = www-data\n\n#uid = pi \n#gid = pi\n\nsocket = /tmp/homecage_app.sock\nchmod-socket = 660\nvacuum = true\n\ndie-on-term = true\n\n\n\n\n\n\n\n\nrun uwsgi and check it creates /tmp/homecage_app.sock\n\n\nuwsgi --ini /home/pi/homecage/homecage_app/uwsgi_config.ini\n\n\n\n\n\n\nmake uwsgi run at boot\n\n\nsudo pico /etc/rc.local\n\n\nappend to end of file before 'exit 0'\n\n\n/usr/local/bin/uwsgi --ini /home/pi/homecage/homecage_app/uwsgi_config.ini --uid pi --gid www-data --daemonize /var/log/uwsgi.log\n\n\n\n\n\n\nconfigure nginx routing\n\n\nremove default\n\n\nsudo rm /etc/nginx/sites-enabled/default\n\n\ncreate our own\n\n\nsudo pico /etc/nginx/sites-available/homecage_app_proxy\n\n\nmake \nhomecage_app_proxy\n look like this\n\n\n\n\n\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  location / {\n    include uwsgi_params;\n    uwsgi_pass unix:///tmp/homecage_app.sock;\n  }\n}\n\n\n\n\n\n\n\n\nlink \nhomecage_app_proxy\n into \nsites-enabled\n folder\n\n\nsudo ln -s /etc/nginx/sites-available/homecage_app_proxy /etc/nginx/sites-enabled\n\n\n\n\n\n\nrestart nginx\n\n\nsudo service nginx restart\n\n\n\n\n\n\ngood to go at http://[IP]\n\n\n\n\n\n\nChange Log\n\n\n20171111\n\n\n\n\nfinish index.html interface, mostly adding interface to change self.config\n\n\nsplit self.config (from config.json) and self.status (runtime variables)\n\n\nadd in dht sensor code\n\n\nadd in white and ir sensor code\n\n\n\n\n20171201\n\n\n\n\nAdded dialog when stopping video\n\n\nadded 'videolist.html' page to display list of video and play on click !\n\n\nnow converting .h264 to .mp4\n\n\nadded to config.json\n\n\nadded bash script convert_video.sh\n\n\ncall bash script when video is done (in thread)\n\n\nadded documentation to install avconv\n\n\n\n\n\n\nnow saving into date folder\n\n\n\n\n20180520\n\n\n\n\n\n\nAdded 3rd component to trigger recording from scope, this includes\n\n\n\n\n'Arm' state to continuously record video into a memory loop\n\n\nOn trigger in, save pre-triggered video and start saving video for a trial\n\n\nOn frame pin, watermark video with frame number\n\n\nAdded 'scope' section to config.json\n\n\n\n\n\n\n\n\nRewrote install documentation to include virtualenv\n\n\n\n\nStarted using git from Pi, can now synch with homecage on github, and push mkdocs !!!\n\n\n\n\nTo Do\n\n\n\n\nFix background text on frame watermark\n\n\nSave trial information to a trial .txt file\n\n\nRevamp .log to include trial information\n\n\n\n\n\n\n\n\n20180520\n\n\n- Added checks in bash scripts to exit nicely if uv4l and avconv are not installed\n- Added script for avprobe (so we can fail niely when not installed)\n- Added option to record x number of files (set to one when on scope and using triggerIn)\n\n\n\n20180601\n\n\n- now using logger throughout (no more print)\n- removed use of avprobe to get video file params, just report file size in file browser\n- now using systemctl and homecage.service to easily start, stop, and run at boot\n- ./install.sh \n- finalized html forms to set params. be careful of conversions between javascript, python, and json dictionaries. For example unexpected conversions between float, int, string\n- starting to think about running nginx-\n\n\n\nSetup\n\n\nhomecage2 is b8:27:eb:88:33:07\ncudmore_pib is b8:27:eb:aa:51:6d",
            "title": "Development notes"
        },
        {
            "location": "/dev-notes/#git",
            "text": "",
            "title": "git"
        },
        {
            "location": "/dev-notes/#git-dev-branch",
            "text": "# checkout a branch 'dev'\ngit checkout dev\n\n# see all branches\ngit branch\n\n# commit ('dev' is implicit)\ngit commit -a -m 'test'\n\n# CRITICAL, push to 'dev'\ngit push -u origin dev\n\n# merge (go into master and fast-forward merge dev)\ngit checkout master\ngit merge dev",
            "title": "git dev branch"
        },
        {
            "location": "/dev-notes/#git-master-branch",
            "text": "Set up password  git config --global credential.helper 'cache --timeout=10000000'  Clone  git clone https://github.com/cudmore/homecage.git  Pull  git pull  Commit all changes. Do this a second time to see untracked files  git commit -a -m 'test'  Add files  git add <filename>  Push  git push -u origin master",
            "title": "git master branch"
        },
        {
            "location": "/dev-notes/#install-in-virtual-env",
            "text": "Make a clean virtual environment that does not depend on current installed packages  # make a folder to hold your virtual environment\nmkdir env\n\n# make a python 2 environment\n#virtualenv -p python2 --no-site-packages env\n\n# make a python 3 environment\nvirtualenv -p python3 --no-site-packages env  Activate the environment  source env/bin/activate  Check your python version  python -V  Make sure python command is running in the virtual environment  which python  Install homecage_app dependencies  pip install -r requirements.txt  Run homecage_app.py  python homecage_app.py  Browse to the homecage_App website  http://[yourip]:5000  Exit virtual environment  deactivate",
            "title": "Install in virtual env"
        },
        {
            "location": "/dev-notes/#mkdocs",
            "text": "We use  mkdocs  to generate the documentation website from markdown files. On the Raspberry, mkdocs will only install into Python 3.x  Install  pip install mkdocs\n\n# we are using the material theme\npip install mkdocs-material  Serve locally  cd\ncd homecage/docs\nmkdocs serve\n\n# or if logged in to a remote pi, serve using the pi ip\nmkdocs serve -a 192.168.1.3:8000  Push to github  cd\ncd homecage/docs\nmkdocs gh-deploy --clean",
            "title": "mkDocs"
        },
        {
            "location": "/dev-notes/#uv4l",
            "text": "uv4l is what we use to stream live video.  20171120 - Problem was that if streaming was on and we tried to stop it while there was still an opened browser window we would get an orphaned  <defunct>  process that can't actually be kill(ed). This was mucking up any future interaciton as  stream ,  record , and  status  thought there was still a uv4l process.",
            "title": "uv4l"
        },
        {
            "location": "/dev-notes/#sent-this-to-uv4l-people",
            "text": "Hi there, great product and the best streaming I have ever seen.\n\nI am running uv4l on a Raspberry Pi (Jessie) and it is working very well.\nOne problem is if I kill the stream with `sudo pkill uv4l` while there is\na browser window open (that is viewing the stream) I end up with a <defunct>\nuv4l process that I can't seem to kill?\n\nCan you suggest a server option I could use to stop this behavior?\nI want to `sudo pkill uv4l` from the pi while some remote user still\nhas a stream window open in the browser? I've looked through the server\noptions and don't really know what I am looking for?\n\nThanks again for uv4l\n\np.s. Can you suggest an online forum for such questions?  Answer was to kill child processes first. Get child processes of PID with `pstree -p PID'  Which eventually led to this  # get uv4l PID\nPID = pgrep uv4l\n# kill all processes in the same group, this includes children\n# kills original and does NOT leave a `<defunct>` uv4l !\nsudo kill -- -PID",
            "title": "Sent this to uv4l people"
        },
        {
            "location": "/dev-notes/#remove-uv4l-raspicam-extras",
            "text": "sudo apt-get remove uv4l-raspicam-extras",
            "title": "Remove uv4l-raspicam-extras"
        },
        {
            "location": "/dev-notes/#nginxuwsgiflask",
            "text": "Follow  this .  and  my blog post   install nginx and uwsgi   sudo apt-get install nginx\nsudo pip install uwsgi    start and stop nginx  sudo service nginx start    change group (not user) of folder  sudo chown -R pi:www-data /home/pi/homecage/homecage_app    not sure if this is necessary but won't hurt and should not break  sudo usermod -aG www-data pi    contents of homecage/homecage_app/uwsgi_config.ini    Because we are using GPIO callbacks, we can't have more than 1 process and 1 thread.  [uwsgi]\n\nchdir = /home/pi/homecage/homecage_app\nmodule = homecage_app:app\n\nmaster = true\nprocesses = 1\nthreads = 1\n\n#uid = www-data \n#gid = www-data\n\n#uid = pi \n#gid = pi\n\nsocket = /tmp/homecage_app.sock\nchmod-socket = 660\nvacuum = true\n\ndie-on-term = true    run uwsgi and check it creates /tmp/homecage_app.sock  uwsgi --ini /home/pi/homecage/homecage_app/uwsgi_config.ini    make uwsgi run at boot  sudo pico /etc/rc.local",
            "title": "nginx+uwsgi+flask"
        },
        {
            "location": "/dev-notes/#append-to-end-of-file-before-exit-0",
            "text": "/usr/local/bin/uwsgi --ini /home/pi/homecage/homecage_app/uwsgi_config.ini --uid pi --gid www-data --daemonize /var/log/uwsgi.log    configure nginx routing",
            "title": "append to end of file before 'exit 0'"
        },
        {
            "location": "/dev-notes/#remove-default",
            "text": "sudo rm /etc/nginx/sites-enabled/default",
            "title": "remove default"
        },
        {
            "location": "/dev-notes/#create-our-own",
            "text": "sudo pico /etc/nginx/sites-available/homecage_app_proxy",
            "title": "create our own"
        },
        {
            "location": "/dev-notes/#make-homecage_app_proxy-look-like-this",
            "text": "server {\n  listen 80;\n  server_name localhost;\n\n  location / {\n    include uwsgi_params;\n    uwsgi_pass unix:///tmp/homecage_app.sock;\n  }\n}    link  homecage_app_proxy  into  sites-enabled  folder  sudo ln -s /etc/nginx/sites-available/homecage_app_proxy /etc/nginx/sites-enabled    restart nginx  sudo service nginx restart    good to go at http://[IP]",
            "title": "make homecage_app_proxy look like this"
        },
        {
            "location": "/dev-notes/#change-log",
            "text": "",
            "title": "Change Log"
        },
        {
            "location": "/dev-notes/#20171111",
            "text": "finish index.html interface, mostly adding interface to change self.config  split self.config (from config.json) and self.status (runtime variables)  add in dht sensor code  add in white and ir sensor code",
            "title": "20171111"
        },
        {
            "location": "/dev-notes/#20171201",
            "text": "Added dialog when stopping video  added 'videolist.html' page to display list of video and play on click !  now converting .h264 to .mp4  added to config.json  added bash script convert_video.sh  call bash script when video is done (in thread)  added documentation to install avconv    now saving into date folder",
            "title": "20171201"
        },
        {
            "location": "/dev-notes/#20180520",
            "text": "Added 3rd component to trigger recording from scope, this includes   'Arm' state to continuously record video into a memory loop  On trigger in, save pre-triggered video and start saving video for a trial  On frame pin, watermark video with frame number  Added 'scope' section to config.json     Rewrote install documentation to include virtualenv   Started using git from Pi, can now synch with homecage on github, and push mkdocs !!!   To Do   Fix background text on frame watermark  Save trial information to a trial .txt file  Revamp .log to include trial information",
            "title": "20180520"
        },
        {
            "location": "/dev-notes/#20180520_1",
            "text": "- Added checks in bash scripts to exit nicely if uv4l and avconv are not installed\n- Added script for avprobe (so we can fail niely when not installed)\n- Added option to record x number of files (set to one when on scope and using triggerIn)",
            "title": "20180520"
        },
        {
            "location": "/dev-notes/#20180601",
            "text": "- now using logger throughout (no more print)\n- removed use of avprobe to get video file params, just report file size in file browser\n- now using systemctl and homecage.service to easily start, stop, and run at boot\n- ./install.sh \n- finalized html forms to set params. be careful of conversions between javascript, python, and json dictionaries. For example unexpected conversions between float, int, string\n- starting to think about running nginx-",
            "title": "20180601"
        },
        {
            "location": "/dev-notes/#setup",
            "text": "homecage2 is b8:27:eb:88:33:07\ncudmore_pib is b8:27:eb:aa:51:6d",
            "title": "Setup"
        },
        {
            "location": "/open-source/",
            "text": "Homecage only exists because of the massive amount of creativity, expertise, and effort that has been put in to creating and maintaining a slew of open-source software projects.\n\n\nServer\n\n\n\n\nDebian\n - Operating system\n\n\nNGINX \n - Web server for load balancing, microservices, and API gateways\n\n\nuwsgi\n - Web standard for NGINX to talk to Python\n\n\n\n\nPython\n (back-end)\n\n\n\n\nFlask\n - Web microframework\n\n\nSciPy\n - Scientific computing ecosystem\n\n\nNumPy\n - Scientific computing for Python\n\n\nPandas\n - Data analysis library\n\n\nMatplotlib\n - Plotting\n\n\nTifffile - General purpose Tiff file library\n\n\nRedis\n - Database\n\n\nCelery\n - Distributed task queue\n\n\n\n\nJavascript\n (front-end)\n\n\n\n\nAngular\n - Superheroic Javascript framework\n\n\nJQuery\n\n\nD3\n - Data driven documents\n\n\nLeaflet\n - Interactive maps\n\n\nPlotly\n - Modern visualization for the data era\n\n\nBootstrap\n - Worlds most popular HTML/CSS/JS Toolkit\n\n\n\n\nContainers\n\n\n\n\nDocker\n - Software containers are the future\n\n\n\n\nDocumentation\n\n\n\n\nJekyll\n - Static site generator (Main \nMap Manager\n documentation)\n\n\nmkDocs\n - Static site generator (This Website)\n\n\nSphinx\n - To create documentation (\nPyMapManager API Documentation\n)\n\n\n\n\nDistribution\n\n\n\n\nGithub\n - Software development platform for online storage/sharing/computation\n\n\nPyPi\n - Python package index for online distribution",
            "title": "Open source"
        },
        {
            "location": "/open-source/#server",
            "text": "Debian  - Operating system  NGINX   - Web server for load balancing, microservices, and API gateways  uwsgi  - Web standard for NGINX to talk to Python",
            "title": "Server"
        },
        {
            "location": "/open-source/#python-back-end",
            "text": "Flask  - Web microframework  SciPy  - Scientific computing ecosystem  NumPy  - Scientific computing for Python  Pandas  - Data analysis library  Matplotlib  - Plotting  Tifffile - General purpose Tiff file library  Redis  - Database  Celery  - Distributed task queue",
            "title": "Python (back-end)"
        },
        {
            "location": "/open-source/#javascript-front-end",
            "text": "Angular  - Superheroic Javascript framework  JQuery  D3  - Data driven documents  Leaflet  - Interactive maps  Plotly  - Modern visualization for the data era  Bootstrap  - Worlds most popular HTML/CSS/JS Toolkit",
            "title": "Javascript (front-end)"
        },
        {
            "location": "/open-source/#containers",
            "text": "Docker  - Software containers are the future",
            "title": "Containers"
        },
        {
            "location": "/open-source/#documentation",
            "text": "Jekyll  - Static site generator (Main  Map Manager  documentation)  mkDocs  - Static site generator (This Website)  Sphinx  - To create documentation ( PyMapManager API Documentation )",
            "title": "Documentation"
        },
        {
            "location": "/open-source/#distribution",
            "text": "Github  - Software development platform for online storage/sharing/computation  PyPi  - Python package index for online distribution",
            "title": "Distribution"
        }
    ]
}